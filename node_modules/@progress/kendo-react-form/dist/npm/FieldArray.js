"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldArray = void 0;
var React = require("react");
var FormContext_1 = require("./FormContext");
/**
 * Represents the FieldArray component that is used inside the KendoReact Form component.
 * It provides methods via render props for common array manipulations.
 */
var FieldArray = function (props) {
    var name = props.name, component = props.component, validator = props.validator, type = props.type, children = props.children, others = __rest(props, ["name", "component", "validator", "type", "children"]);
    var form = React.useContext(FormContext_1.FormContext);
    var formId = form ? form.id : '';
    React.useEffect(function () {
        if (!form) {
            return;
        }
        var unregisterField = form.registerField(name, validator);
        return unregisterField;
    }, [name, formId, validator]);
    var onUnshift = React.useCallback(function (event) { return form.onUnshift(name, event); }, [name, formId]);
    var onPush = React.useCallback(function (event) { return form.onPush(name, event); }, [name, formId]);
    var onInsert = React.useCallback(function (event) { return form.onInsert(name, event); }, [name, formId]);
    var onPop = React.useCallback(function () { return form.onPop(name); }, [name, formId]);
    var onRemove = React.useCallback(function (event) { return form.onRemove(name, event); }, [name, formId]);
    var onReplace = React.useCallback(function (event) { return form.onReplace(name, event); }, [name, formId]);
    var onMove = React.useCallback(function (event) { return form.onMove(name, event); }, [name, formId]);
    if (!form) {
        // TODO: For future versions - warn for missing form in dev mode
        // if (__process.env.NODE_ENV !== 'production') { // or __DEV__
        //     throw new Error('Field must be used inside of a <Form> component');
        // }
        return null;
    }
    // TODO: remove this and pass down  getter to allow users optimize when to refresh the data?
    var value = form.valueGetter(name);
    // TODO: For future versions as it's better to have render prop
    // if (typeof children === 'function') {
    //     return children({ ...field, children: undefined, ...others });
    // }
    return React.createElement(component, __assign({ 
        // input
        value: value, 
        // meta
        validationMessage: form.errors[name], touched: form.touched[name], modified: form.modified[name], visited: form.visited[name], 
        // Our `valid` implementation requires double submit to show html5 validation errors,
        // however it's NOT recommended to show html5 validation errors at all as:
        // - There is no standard way to change validation look and feel with CSS.
        // - Look different in each browser / OS
        // - You can have a page in one language but an error message displayed in another language (not localizable)
        valid: !(Boolean(form.errors[name]) && form.touched[name]), onUnshift: onUnshift, onPush: onPush, onInsert: onInsert, onPop: onPop, onRemove: onRemove, onReplace: onReplace, onMove: onMove, children: children, name: name }, others));
};
exports.FieldArray = FieldArray;
exports.FieldArray.displayName = 'KendoReactFieldArray';
