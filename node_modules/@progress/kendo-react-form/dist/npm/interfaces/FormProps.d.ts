/// <reference types="react" />
import { FormRenderProps } from './FormRenderProps';
import { FormValidatorType } from './FormValidator';
import { FormSubmitClickEvent } from './FormSubmitClickEvent';
/**
 * Represents the props of the KendoReact Form component.
 */
export interface FormProps {
    /**
     * The initial field values of the Form.
     *
     * > When you initialize the Form felds, set initial values to them. Otherwise, some
     * components might throw errors related to switching from uncontrolled to controlled mode.
     */
    initialValues?: {
        [name: string]: any;
    };
    /**
     * The validation function for the Form level.
     * Should return key-value pair where the key is the field path and the value is the error message.
     * Nested fields are supported, e.g.: 'users[0].name'.
     * You can use the same field path to access the value from the
     * values object using the `getter` function from the `kendo-react-common` package.
     * Currently, `validator` supports only synchronous functions.
     */
    validator?: FormValidatorType;
    /**
     * The submission handler for the Form.
     * Called when at least one field has been modified, the user pressed the **Submit** button,  and the form validation was successful.
     */
    onSubmit?: (values: {
        [name: string]: any;
    }, event?: React.SyntheticEvent<any>) => void;
    /**
     * Called every time the user presses the **Submit** button.
     * Useful in advanced scenarios when you need to handle every submit event, even when the form is invalid or not modified state.
     */
    onSubmitClick?: (event: FormSubmitClickEvent) => void;
    /**
     * The Form content that will be rendered.
     */
    render: (props: FormRenderProps) => any;
    /**
     * Set this to `true` to allow the form submit without modifed fields.
     */
    ignoreModified?: boolean;
}
