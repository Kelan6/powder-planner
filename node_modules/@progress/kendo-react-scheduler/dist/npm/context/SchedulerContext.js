"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerContext = exports.useSchedulerItemSelectionContext = exports.SchedulerItemSelectionContext = exports.useSchedulerActiveViewContext = exports.SchedulerActiveViewContext = exports.useSchedulerDataContext = exports.SchedulerDataContext = exports.useSchedulerDateContext = exports.SchedulerDateContext = exports.useSchedulerOrientationContext = exports.SchedulerOrientationContext = exports.useSchedulerDateRangeContext = exports.SchedulerDateRangeContext = exports.useSchedulerGroupsContext = exports.SchedulerGroupsContext = exports.useSchedulerDateFormatContext = exports.SchedulerDateFormatContext = exports.useSchedulerFieldsContext = exports.SchedulerFieldsContext = exports.useSchedulerViewsContext = exports.SchedulerViewsContext = exports.useSchedulerPropsContext = exports.SchedulerPropsContext = exports.useSchedulerElementContext = exports.SchedulerElementContext = void 0;
var React = require("react");
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var kendo_date_math_1 = require("@progress/kendo-date-math");
/** @hidden */
exports.SchedulerElementContext = React.createContext({ current: null });
/** @hidden */
var useSchedulerElementContext = function () { return React.useContext(exports.SchedulerElementContext); };
exports.useSchedulerElementContext = useSchedulerElementContext;
exports.SchedulerElementContext.displayName = 'SchedulerElementContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [Scheduler]({% slug api_scheduler_scheduler %}) props.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerPropsContext = React.createContext({});
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [Scheduler]({% slug api_scheduler_scheduler %}) props.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerPropsContext = function () { return React.useContext(exports.SchedulerPropsContext); };
exports.useSchedulerPropsContext = useSchedulerPropsContext;
exports.SchedulerPropsContext.displayName = 'SchedulerPropsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the available Scheduler [views]({% slug views_scheduler %}).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerViewsContext = React.createContext([]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the available Scheduler [views]({% slug views_scheduler %}).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerViewsContext = function () { return React.useContext(exports.SchedulerViewsContext); };
exports.useSchedulerViewsContext = useSchedulerViewsContext;
exports.SchedulerViewsContext.displayName = 'SchedulerViewsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerFieldsContext = React.createContext(utils_1.defaultModelFields);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerFieldsContext = function () { return React.useContext(exports.SchedulerFieldsContext); };
exports.useSchedulerFieldsContext = useSchedulerFieldsContext;
exports.SchedulerFieldsContext.displayName = 'SchedulerFieldsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerDateFormatContext = React.createContext({ dateFormat: '{0:D}', shortDateFormat: '{0:d}' });
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerDateFormatContext = function () { return React.useContext(exports.SchedulerDateFormatContext); };
exports.useSchedulerDateFormatContext = useSchedulerDateFormatContext;
exports.SchedulerDateFormatContext.displayName = 'SchedulerDateFormatContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler `Group` object, calculated based on the [group]({% slug api_scheduler_schedulerprops %}#toc-group) and [resources]({% slug api_scheduler_schedulerprops %}#toc-resources).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerGroupsContext = React.createContext([constants_1.DEFAULT_GROUP]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler `Group` object, calculated based on the [group]({% slug api_scheduler_schedulerprops %}#toc-group) and [resources]({% slug api_scheduler_schedulerprops %}#toc-resources).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerGroupsContext = function () { return React.useContext(exports.SchedulerGroupsContext); };
exports.useSchedulerGroupsContext = useSchedulerGroupsContext;
exports.SchedulerGroupsContext.displayName = 'SchedulerGroupsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the `dateRange` of the current view.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerDateRangeContext = React.createContext({ start: new Date(), end: new Date(), zonedStart: kendo_date_math_1.ZonedDate.fromLocalDate(new Date()), zonedEnd: kendo_date_math_1.ZonedDate.fromLocalDate(new Date()) });
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the `dateRange` of the current view.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerDateRangeContext = function () { return React.useContext(exports.SchedulerDateRangeContext); };
exports.useSchedulerDateRangeContext = useSchedulerDateRangeContext;
exports.SchedulerDateRangeContext.displayName = 'SchedulerDateRangeContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the grouping orientation of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerOrientationContext = React.createContext(null);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the grouping orientation of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerOrientationContext = function () { return React.useContext(exports.SchedulerOrientationContext); };
exports.useSchedulerOrientationContext = useSchedulerOrientationContext;
exports.SchedulerOrientationContext.displayName = 'SchedulerOrientationContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `date` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerDateContext = React.createContext([new Date(), utils_1.noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `date` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerDateContext = function () { return React.useContext(exports.SchedulerDateContext); };
exports.useSchedulerDateContext = useSchedulerDateContext;
exports.SchedulerDateContext.displayName = 'SchedulerDateContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `data` reducer.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerDataContext = React.createContext([[], utils_1.noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `data` reducer.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerDataContext = function () { return React.useContext(exports.SchedulerDataContext); };
exports.useSchedulerDataContext = useSchedulerDataContext;
exports.SchedulerDataContext.displayName = 'SchedulerDataContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `activeView` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
exports.SchedulerActiveViewContext = React.createContext(['day', utils_1.noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `activeView` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
var useSchedulerActiveViewContext = function () { return React.useContext(exports.SchedulerActiveViewContext); };
exports.useSchedulerActiveViewContext = useSchedulerActiveViewContext;
exports.SchedulerActiveViewContext.displayName = 'SchedulerActiveViewContext';
/**
 * @hidden
 */
exports.SchedulerItemSelectionContext = React.createContext([null, function () { }]);
/**
 * @hidden
 */
var useSchedulerItemSelectionContext = function () { return React.useContext(exports.SchedulerItemSelectionContext); };
exports.useSchedulerItemSelectionContext = useSchedulerItemSelectionContext;
exports.SchedulerItemSelectionContext.displayName = 'SchedulerItemSelectionContext';
/**
 *
 */
/** @hidden */
var SchedulerContext = function (_a) {
    var children = _a.children, element = _a.element, props = _a.props, views = _a.views, fields = _a.fields, groups = _a.groups, dateRange = _a.dateRange, dateFormat = _a.dateFormat, orientation = _a.orientation, date = _a.date, data = _a.data, activeView = _a.activeView, selection = _a.selection;
    return (React.createElement(exports.SchedulerElementContext.Provider, { value: element },
        React.createElement(exports.SchedulerPropsContext.Provider, { value: props },
            React.createElement(exports.SchedulerViewsContext.Provider, { value: views },
                React.createElement(exports.SchedulerFieldsContext.Provider, { value: fields },
                    React.createElement(exports.SchedulerDateFormatContext.Provider, { value: dateFormat },
                        React.createElement(exports.SchedulerGroupsContext.Provider, { value: groups },
                            React.createElement(exports.SchedulerDateRangeContext.Provider, { value: dateRange },
                                React.createElement(exports.SchedulerOrientationContext.Provider, { value: orientation },
                                    React.createElement(exports.SchedulerDateContext.Provider, { value: date },
                                        React.createElement(exports.SchedulerDataContext.Provider, { value: data },
                                            React.createElement(exports.SchedulerActiveViewContext.Provider, { value: activeView },
                                                React.createElement(exports.SchedulerItemSelectionContext.Provider, { value: selection }, children)))))))))))));
};
exports.SchedulerContext = SchedulerContext;
