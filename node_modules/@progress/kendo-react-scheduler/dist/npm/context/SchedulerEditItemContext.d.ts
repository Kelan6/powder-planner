import * as React from 'react';
import { DataItem } from '../models';
import { SchedulerEditItemProps } from '../main';
import { SchedulerItemFormItemAction } from '../items/hooks/use-form-item';
import { BaseEvent } from '@progress/kendo-react-common';
/** @hidden */
export interface SchedulerEditItemContextProps {
    props: SchedulerEditItemPropsContextType;
    form: SchedulerEditItemFormItemContextType;
    drag: SchedulerEditItemDragItemContextType;
    resize: SchedulerEditItemResizeItemContextType;
    remove: SchedulerEditItemRemoveItemContextType;
    showRemoveDialog: SchedulerEditItemShowRemoveDialogContextType;
    showOccurrenceDialog: SchedulerEditItemShowOccurrenceDialogContextType;
    children?: React.ReactNode;
}
/**
 * Specifies the result of the [useSchedulerEditItemPropsContext]({% slug api_scheduler_usescheduleredititempropscontext %}) and [SchedulerEditItemPropsContext]({% slug api_scheduler_scheduleredititempropscontext %}).
 */
export declare type SchedulerEditItemPropsContextType = SchedulerEditItemProps;
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) `props`.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export declare const SchedulerEditItemPropsContext: React.Context<SchedulerEditItemProps>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) `props`.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerEditItemPropsContext: () => SchedulerEditItemPropsContextType;
/**
 * Specifies the result of the [useSchedulerEditItemFormItemContext]({% slug api_scheduler_usescheduleredititemformitemcontext %}) and [SchedulerEditItemFormItemContext]({% slug api_scheduler_scheduleredititemformitemcontext %}).
 */
export declare type SchedulerEditItemFormItemContextType = [DataItem | null, (newValue: DataItem | null, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void, (action: SchedulerItemFormItemAction, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `formItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export declare const SchedulerEditItemFormItemContext: React.Context<SchedulerEditItemFormItemContextType>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `formItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerEditItemFormItemContext: () => SchedulerEditItemFormItemContextType;
/**
 * Specifies the result of the [useSchedulerEditItemDragItemContext]({% slug api_scheduler_usescheduleredititemdragitemcontext %}) and [SchedulerEditItemDragItemContext]({% slug api_scheduler_scheduleredititemdragitemcontext %}).
 */
export declare type SchedulerEditItemDragItemContextType = [DataItem | null, (newValue?: DataItem | null, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void, (action: SchedulerItemFormItemAction, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `dragItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export declare const SchedulerEditItemDragItemContext: React.Context<SchedulerEditItemDragItemContextType>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `dragItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerEditItemDragItemContext: () => SchedulerEditItemDragItemContextType;
/**
 * Specifies the result of the [useSchedulerEditItemResizeItemContext]({% slug api_scheduler_usescheduleredititemresizeitemcontext %}) and [SchedulerEditItemResizeItemContext]({% slug api_scheduler_scheduleredititemresizeitemcontext %}).
 */
export declare type SchedulerEditItemResizeItemContextType = [DataItem | null, (newValue?: DataItem | null, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void, (action: SchedulerItemFormItemAction, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `resizeItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export declare const SchedulerEditItemResizeItemContext: React.Context<SchedulerEditItemResizeItemContextType>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `resizeItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerEditItemResizeItemContext: () => SchedulerEditItemResizeItemContextType;
/**
 * Specifies the result of the [useSchedulerEditItemRemoveItemContext]({% slug api_scheduler_usescheduleredititemremoveitemcontext %}) and [SchedulerEditItemRemoveItemContext]({% slug api_scheduler_scheduleredititemremoveitemcontext %}).
 */
export declare type SchedulerEditItemRemoveItemContextType = [DataItem | null, (newValue?: any, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void, (action: SchedulerItemFormItemAction, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `removeItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export declare const SchedulerEditItemRemoveItemContext: React.Context<SchedulerEditItemRemoveItemContextType>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `removeItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerEditItemRemoveItemContext: () => SchedulerEditItemRemoveItemContextType;
/**
 * Specifies the result of the [useSchedulerEditItemShowRemoveDialogContext]({% slug api_scheduler_usescheduleredititemshowremovedialogcontext %}) and [SchedulerEditItemShowRemoveDialogContext]({% slug api_scheduler_scheduleredititemshowremovedialogcontext %}).
 */
export declare type SchedulerEditItemShowRemoveDialogContextType = [boolean, (newValue?: boolean, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void, (action: SchedulerItemFormItemAction, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `showRemoveDialog` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export declare const SchedulerEditItemShowRemoveDialogContext: React.Context<SchedulerEditItemShowRemoveDialogContextType>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `showRemoveDialog` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerEditItemShowRemoveDialogContext: () => SchedulerEditItemShowRemoveDialogContextType;
/**
 * Specifies the result of the [useSchedulerEditItemShowOccurrenceDialogContext]({% slug api_scheduler_usescheduleredititemshowoccurrencedialogcontext %}) and [SchedulerEditItemShowOccurrenceDialogContext]({% slug api_scheduler_scheduleredititemshowoccurrencedialogcontext %}).
 */
export declare type SchedulerEditItemShowOccurrenceDialogContextType = [boolean, (newValue?: boolean, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void, (action: SchedulerItemFormItemAction, event?: React.SyntheticEvent | BaseEvent<any> | {
    preventDefault: any;
}) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `showOccurrenceDialog` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export declare const SchedulerEditItemShowOccurrenceDialogContext: React.Context<SchedulerEditItemShowOccurrenceDialogContextType>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `showOccurrenceDialog` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerEditItemShowOccurrenceDialogContext: () => SchedulerEditItemShowOccurrenceDialogContextType;
/** @hidden */
export declare const SchedulerEditItemContext: ({ props, form, drag, resize, remove, showRemoveDialog, showOccurrenceDialog, children }: SchedulerEditItemContextProps) => JSX.Element;
