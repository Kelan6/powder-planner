import * as React from 'react';
import { DataItem, SchedulerView, EditableProp, SchedulerGroup, SchedulerResource, SchedulerModelFields } from './models';
import { SchedulerHandle } from './models/SchedulerHandle';
import { SchedulerHeaderProps } from './components/header/SchedulerHeader';
import { SchedulerTaskProps } from './tasks/SchedulerTask';
import { SchedulerSlotProps } from './slots/SchedulerSlot';
import { SchedulerItemProps } from './items/SchedulerItem';
import { SchedulerEditItemProps } from './items/SchedulerEditItem';
import { SchedulerViewItemProps } from './items/SchedulerViewItem';
import { SchedulerViewSlotProps } from './slots/SchedulerViewSlot';
import { SchedulerEditSlotProps } from './slots/SchedulerEditSlot';
import { SchedulerFooterProps } from './components/footer/SchedulerFooter';
import { SchedulerFormProps } from './main';
/**
 * Represents the props of the [KendoReact Scheduler component]({% slug overview_scheduler %}).
 */
export interface SchedulerProps {
    /**
     * Specifies the `id` of the wrapping element of the Scheduler.
     */
    id?: string;
    /**
     * Specifies the `tabIndex` attribute of the wrapping element of the Scheduler.
     */
    tabIndex?: number;
    /**
     * Specifies the `role` attribute of the Scheduler wrapping element.
     *
     * For more information, refer to the [Scheduler Accessibility Compliance]({% slug accessibility_scheduler %}) article
     */
    role?: string;
    /**
     * The `aria-labelledby` attribute to be applied to the Scheduler component.
     *
     * For more information, refer to the [Scheduler Accessibility Compliance]({% slug accessibility_scheduler %}) article
     */
    ariaLabelledby?: string;
    /**
     * The `aria-label` attribute to be applied to the Scheduler component.
     *
     * For more information, refer to the [Scheduler Accessibility Compliance]({% slug accessibility_scheduler %}) article
     */
    ariaLabel?: string;
    /**
     * Specifies the `style` object of the wrapping element of the Scheduler.
     */
    style?: React.CSSProperties;
    /**
     * Specifies the `className` attribute of the wrapping element of the Scheduler.
     */
    className?: string;
    /**
     * Overrides the default item. Specifying the `item` property of a specific view will override this property.
     *
     * The default component is: [SchedulerItem]({% slug api_scheduler_scheduleritem %})
     *
     * For more information on customizing the scheduler items, refer to the [Item Customization]({% slug overview_items_scheduler %}) article.
     */
    item?: React.ComponentType<SchedulerItemProps>;
    /**
     * Overrides the default viewItem. Specifying the `viewItem` property of a specific view will override this property.
     *
     * The default component is: [SchedulerViewItem]({% slug api_scheduler_schedulerviewitem %})
     *
     * For more information on customizing the scheduler items, refer to the [Item Customization]({% slug overview_items_scheduler %}) article.
     */
    viewItem?: React.ComponentType<SchedulerViewItemProps>;
    /**
     * Overrides the default editItem. Specifying the `editItem` property of a specific view will override this property.
     *
     * The default component is: [SchedulerEditItem]({% slug api_scheduler_scheduleredititem %})
     *
     * For more information on customizing the scheduler items, refer to the [Item Customization]({% slug overview_items_scheduler %}) article.
     */
    editItem?: React.ComponentType<SchedulerEditItemProps>;
    /**
     * Overrides the default task. Specifying the `task` property of a specific view will override this property.
     * Currently, the `task` is being used in the [AgendaView]({% slug agenda_view_scheduler %}) only.
     *
     * The default component is: [SchedulerTask]({% slug api_scheduler_schedulertask %})
     *
     * For more information on customizing the scheduler tasks, refer to the [Task Customization]({% slug overview_tasks_scheduler %}) article.
     */
    task?: React.ComponentType<SchedulerTaskProps>;
    /**
     * Overrides the default viewTask. Specifying the `viewTask` property of a specific view will override this property.
     * Currently, the `viewTask` is being used in the [AgendaView]({% slug agenda_view_scheduler %}) only.
     *
     * The default component is: [SchedulerViewTask]({% slug api_scheduler_schedulerviewtask %})
     *
     * For more information on customizing the scheduler tasks, refer to the [Task Customization]({% slug overview_tasks_scheduler %}) article.
     */
    viewTask?: React.ComponentType<SchedulerTaskProps>;
    /**
     * Overrides the default editTask. Specifying the `editTask` property of a specific view will override this property.
     * Currently, the `viewTask` is being used in the [AgendaView]({% slug agenda_view_scheduler %}) only.
     *
     * The default component is: [SchedulerEditTask]({% slug api_scheduler_scheduleredittask %})
     *
     * For more information on customizing the scheduler tasks, refer to the [Task Customization]({% slug overview_tasks_scheduler %}) article.
     */
    editTask?: React.ComponentType<SchedulerTaskProps>;
    /**
     * Overrides the default header component of the Scheduler.
     *
     * The default component is: [SchedulerHeader]({% slug api_scheduler_schedulerheader %})
     *
     * For more information on customizing the scheduler header, refer to the [Header Customization]({% slug overview_header_footer_scheduler %}) article.
     */
    header?: React.ComponentType<SchedulerHeaderProps>;
    /**
     * Overrides the default footer component of the Scheduler.
     *
     * The default component is: [Scheduler]({% slug api_scheduler_schedulerfooter %})
     *
     * For more information on customizing the scheduler footer, refer to the [Footer Customization]({% slug overview_header_footer_scheduler %}) article.
     */
    footer?: React.ComponentType<SchedulerFooterProps>;
    /**
     * Overrides the default slot component. Specifying the `slot` property of a specific view will override this property.
     *
     * The default component is: [SchedulerSlot]({% slug api_scheduler_schedulerslot %})
     *
     * For more information on customizing the scheduler slots, refer to the [Slot Customization]({% slug overview_slots_scheduler %}) article.
     */
    slot?: React.ComponentType<SchedulerSlotProps>;
    /**
     * Overrides the default viewSlot component. Specifying the `viewSlot` property of a specific view will override this property.
     *
     * The default component is: [SchedulerViewSlot]({% slug api_scheduler_schedulerviewslot %})
     *
     * For more information on customizing the scheduler slots, refer to the [Slot Customization]({% slug overview_slots_scheduler %}) article.
     */
    viewSlot?: React.ComponentType<SchedulerViewSlotProps>;
    /**
     * Overrides the default editSlot component. Specifying the `editSlot` property of a specific view will override this property.
     *
     * The default component is: [SchedulerEditSlot]({% slug api_scheduler_schedulereditslot %})
     *
     * For more information on customizing the scheduler slots, refer to the [Slot Customization]({% slug overview_slots_scheduler %}) article.
     */
    editSlot?: React.ComponentType<SchedulerEditSlotProps>;
    /** @hidden */
    form?: React.ComponentType<SchedulerFormProps>;
    /**
     * Sets the currently selected view. The value is matched with the `name` property of the view.
     */
    view?: string;
    /**
     * Sets the data of the Scheduler component. The data is then parsed and rendered as a visual Scheduler items.
     */
    data?: DataItem[];
    /**
     * Sets if the Scheduler component is editable. The value can be either a `boolean` or an Object to specify different types of editing.
     */
    editable?: EditableProp | boolean;
    /**
     * Sets the initially selected view.
     *
     * For more information refer to the [Scheduler Views]({% slug views_scheduler %}) article.
     *
     * Sets the initially selected view. The available values are:
     * * `day`
     * * `week`
     * * `month`
     * * `agenda`
     * * `timeline`
     */
    defaultView?: string;
    /**
     * Sets the current selected `Date`. The current selected date is passed to the selected view and transformed in to a range.
     */
    date?: Date;
    /**
     * Sets a default selected `Date`. The `defaultDate` property is used to specify the initial rendered date, while still remaining in an uncontrolled mode.
     */
    defaultDate?: Date;
    /**
     * Force a `rtl` mode. For more information refer to [RTL Support]({% slug globalization_scheduler %}#toc-right-to-left-support)
     */
    rtl?: boolean;
    /**
     * Sets the `height` of the Scheduler.
     */
    height?: number | string;
    /**
     * Specify the available `view` components as `children` and the Scheduler will match the currently selected view and render it.
     */
    children?: SchedulerView[] | SchedulerView;
    /**
     * Specifies the id of the timezone that will be displayed in the Scheduler.
     * For example, `Europe/Sofia`.
     *
     * Defaults to `Etc/UTC`.
     */
    timezone?: string;
    /**
     * Specifies the groups of the Scheduler.
     */
    group?: SchedulerGroup;
    /**
     * Specifies the resources of the Scheduler.
     */
    resources?: SchedulerResource[];
    /**
     * The names of the model fields from which the Scheduler will read its data
     * ([see example]({% slug data_binding_scheduler %})).
     */
    modelFields?: SchedulerModelFields;
    /**
     * Called when new `date` is selected.
     */
    onDateChange?: (args: SchedulerDateChangeEvent) => void;
    /**
     * Called when new `view` is selected. [(see example)]({% slug views_scheduler %}#toc-controlling-the-selected-view)
     */
    onViewChange?: (args: SchedulerViewChangeEvent) => void;
    /**
     * Called each time when editing occurs.
     * To enable editing set the `editable` property to `true` or an [`EditableProp`]({% slug api_scheduler_editableprop %})
     *
     * For more information refer to the [Scheduler Editing]({% slug editing_scheduler %}) article.
     */
    onDataChange?: (event: SchedulerDataChangeEvent) => void;
}
/**
 * Specifies the available [DataAction]({% slug api_scheduler_data_action %}) types.
 */
export declare enum DATA_ACTION {
    create = 0,
    update = 1,
    remove = 2
}
/**
 * Specifies the action which can be dispatched through the [SchedulerDataContext]({% slug api_scheduler_schedulerdatacontext %}).
 *
 * For more information refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export interface DataAction {
    /**
     * The `type` of the action. The available types are:
     * - `create`
     * - `update`
     * - `remove`
     */
    type: DATA_ACTION;
    /**
     * Specifies if the action should be applied to the whole series of a recurring item. If the item is not recurring, set `series` to `false`.
     */
    series: boolean;
    /**
     * Specifies the `dataItem` being edited.
     */
    dataItem: DataItem;
}
/** @hidden */
export interface DateChangeEvent {
    target: any;
    syntheticEvent: React.SyntheticEvent;
}
/**
 * Called every time the user changes the selected `date`.
 * The value is a JavaScript `Date` object.
 * For more information, refer to the article on
 * [date selection]({% slug date_selection_scheduler %}).
 */
export interface SchedulerDateChangeEvent {
    value: Date;
}
/**
 * Called every time the user changes the provided `data`.
 *
 * For more information, refer to the [Scheduler Data Binding]({% slug data_binding_scheduler %}) article.
 */
export interface SchedulerDataChangeEvent {
    created: DataItem[];
    updated: DataItem[];
    deleted: DataItem[];
}
/** @hidden */
export interface ActiveViewNameChangeEvent {
    syntheticEvent: React.SyntheticEvent;
    target: any;
}
/**
 * Called every time the user changes the active `view`.
 *
 * For more information, refer to the [Scheduler Views]({% slug views_scheduler %}) article.
 */
export interface SchedulerViewChangeEvent {
    value: string;
}
/**
 * Represents the [KendoReact Scheduler component]({% slug overview_scheduler %})
 */
export declare const Scheduler: React.ForwardRefExoticComponent<SchedulerProps & React.RefAttributes<SchedulerHandle | null>>;
