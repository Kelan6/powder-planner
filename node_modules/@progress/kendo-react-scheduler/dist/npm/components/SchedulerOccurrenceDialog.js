"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerOccurrenceDialog = void 0;
var React = require("react");
var ReactDOM = require("react-dom");
var kendo_react_dialogs_1 = require("@progress/kendo-react-dialogs");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("../messages");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
/* eslint-disable max-len */
/**
 * Represents the default `occurrenceDialog` component rendered by the [KendoReact SchedulerEditItem component]({% slug api_scheduler_scheduleredititem  %}).
 */
exports.SchedulerOccurrenceDialog = React.forwardRef(function (props, ref) {
    // tslint:enable:max-line-length
    var isRemove = props.isRemove, onClose = props.onClose, onSeriesClick = props.onSeriesClick, onOccurrenceClick = props.onOccurrenceClick;
    var target = React.useRef(null);
    React.useImperativeHandle(target, function () { return ({ props: props }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var localizationService = (0, kendo_react_intl_1.useLocalization)();
    var localizeMessage = function (message) {
        return localizationService.toLanguageString(message, messages_1.messages[message]);
    };
    var editOccurrenceMessage = localizeMessage(messages_1.editorOccurrence);
    var editSeriesMessage = localizeMessage(messages_1.editorSeries);
    var editRecurringConfirmationMessage = localizeMessage(messages_1.editorRecurringConfirmation);
    var editRecurringDialogTitleMessage = localizeMessage(messages_1.editorRecurringDialogTitle);
    var deleteOccurrenceMessage = localizeMessage(messages_1.deleteOccurrence);
    var deleteSeriesMessage = localizeMessage(messages_1.deleteSeries);
    var deleteRecurringDialogTitleMessage = localizeMessage(messages_1.deleteRecurringDialogTitle);
    var deleteRecurringConfirmationMessage = localizeMessage(messages_1.deleteRecurringConfirmation);
    var titleMessage = isRemove ? deleteRecurringDialogTitleMessage : editRecurringDialogTitleMessage;
    var confirmationMessage = isRemove ? deleteRecurringConfirmationMessage : editRecurringConfirmationMessage;
    var occurrenceMessage = isRemove ? deleteOccurrenceMessage : editOccurrenceMessage;
    var seriesMessage = isRemove ? deleteSeriesMessage : editSeriesMessage;
    var handleClose = React.useCallback(function (_a) {
        var syntheticEvent = _a.syntheticEvent;
        if (!onClose) {
            return;
        }
        onClose.call(undefined, { syntheticEvent: syntheticEvent, value: null, target: target.current });
    }, [onClose]);
    var handleSeriesClick = React.useCallback(function (syntheticEvent) {
        if (!onSeriesClick) {
            return;
        }
        onSeriesClick.call(undefined, { syntheticEvent: syntheticEvent, value: null, target: target.current });
    }, [onSeriesClick]);
    var handleOccurrenceClick = React.useCallback(function (syntheticEvent) {
        if (!onOccurrenceClick) {
            return;
        }
        onOccurrenceClick.call(undefined, { syntheticEvent: syntheticEvent, value: null, target: target.current });
    }, [onOccurrenceClick]);
    return kendo_react_common_1.canUseDOM
        ? ReactDOM.createPortal((React.createElement(kendo_react_dialogs_1.Dialog, { title: titleMessage, onClose: handleClose },
            confirmationMessage,
            React.createElement(kendo_react_dialogs_1.DialogActionsBar, null,
                React.createElement(kendo_react_buttons_1.Button, { onClick: handleOccurrenceClick }, occurrenceMessage),
                React.createElement(kendo_react_buttons_1.Button, { onClick: handleSeriesClick }, seriesMessage)))), document && document.body)
        : null;
});
exports.SchedulerOccurrenceDialog.displayName = 'KendoReactSchedulerSchedulerOccurrenceDialog';
