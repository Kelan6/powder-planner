"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewSelectorList = void 0;
var React = require("react");
var main_1 = require("../../../main");
var context_1 = require("../../../context");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var ViewSelectorItem_1 = require("./ViewSelectorItem");
/** @hidden */
exports.ViewSelectorList = React.forwardRef(function () {
    var element = React.useRef(null);
    var _a = React.useState('desktop'), media = _a[0], setMedia = _a[1];
    var views = (0, main_1.useSchedulerViewsContext)();
    var getWindow = (0, kendo_react_common_1.useWindow)(element);
    var _b = (0, context_1.useSchedulerActiveViewContext)(), activeViewName = _b[0], setActiveViewName = _b[1];
    var activeView = views.find(function (v) { return v.props.name === activeViewName; });
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var handleItemClick = React.useCallback(function (event) {
        if (!setActiveViewName) {
            return;
        }
        event.syntheticEvent.preventDefault();
        setActiveViewName(event.item.name);
    }, [setActiveViewName]);
    var calculateMedia = function () {
        setMedia(getWindow().matchMedia('(min-width: 1024px)').matches
            ? 'desktop'
            : 'mobile');
    };
    React.useEffect(function () {
        calculateMedia();
        var observer = new (getWindow().ResizeObserver)(calculateMedia);
        observer.observe(element.current);
        return function () {
            observer.disconnect();
        };
    }, []);
    return (React.createElement("div", { className: "k-scheduler-views-wrapper", ref: element },
        (activeView && media === 'mobile') && (React.createElement(kendo_react_buttons_1.DropDownButton, { className: "k-views-dropdown", onItemClick: handleItemClick, popupSettings: { popupClass: 'k-scheduler-toolbar' }, textField: "title", items: views.map(function (v) { return (__assign(__assign({}, v.props), { selected: v.props.name === activeViewName, title: typeof v.props.title === 'function'
                    ? v.props.title.call(undefined, localization)
                    : v.props.title })); }), text: (React.createElement(React.Fragment, null,
                typeof activeView.props.title === 'function'
                    ? activeView.props.title.call(undefined, localization)
                    : activeView.props.title,
                React.createElement("span", { className: "k-icon k-i-caret-alt-down" }))) })),
        (media === 'desktop') && (React.createElement(kendo_react_buttons_1.ButtonGroup, { className: "k-scheduler-views" }, views.map(function (view) { return (React.createElement(ViewSelectorItem_1.ViewSelectorItem, { key: view.props.name, view: view.props })); })))));
});
exports.ViewSelectorList.displayName = 'KendoReactSchedulerViewSelectorList';
