"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerEditTask = void 0;
var React = require("react");
var SchedulerViewTask_1 = require("./SchedulerViewTask");
var useControlledState_1 = require("../hooks/useControlledState");
var hooks_1 = require("../hooks");
var utils_1 = require("../utils");
var Scheduler_1 = require("../Scheduler");
var SchedulerRemoveDialog_1 = require("../components/SchedulerRemoveDialog");
var SchedulerOccurrenceDialog_1 = require("../components/SchedulerOccurrenceDialog");
var SchedulerContext_1 = require("../context/SchedulerContext");
var SchedulerEditTaskContext_1 = require("../context/SchedulerEditTaskContext");
/**
 * Represents the default `editTask` component rendered by the [KendoReact Scheduler component]({% slug overview_scheduler %}).
 *
 * This is a composite component of the [`SchedulerViewTask`]({% slug api_scheduler_schedulerviewtask %}), extending it to provide the `remove` editing functionality.
 */
exports.SchedulerEditTask = React.forwardRef(function (props, ref) {
    var _ref = props._ref, onDataAction = props.onDataAction, viewTaskProp = props.viewTask, propRemoveDialog = props.removeDialog, propRemoveItem = props.removeItem, onRemoveItemChange = props.onRemoveItemChange, propOccurrenceDialog = props.occurrenceDialog, propShowOccurrenceDialog = props.showOccurrenceDialog, onShowOccurrenceDialogChange = props.onShowOccurrenceDialogChange, propShowRemoveDialog = props.showRemoveDialog, onShowRemoveDialogChange = props.onShowRemoveDialogChange, taskProps = __rest(props, ["_ref", "onDataAction", "viewTask", "removeDialog", "removeItem", "onRemoveItemChange", "occurrenceDialog", "showOccurrenceDialog", "onShowOccurrenceDialogChange", "showRemoveDialog", "onShowRemoveDialogChange"]);
    var viewTask = React.useRef(null);
    React.useImperativeHandle(viewTask, function () { return ({ props: props, element: viewTask.current && viewTask.current.element }); });
    React.useImperativeHandle(_ref, function () { return viewTask.current; });
    React.useImperativeHandle(ref, function () { return viewTask.current; });
    var VieTask = viewTaskProp || defaultProps.viewTask;
    var OccurrenceDialog = propOccurrenceDialog || defaultProps.occurrenceDialog;
    var RemoveDialog = propRemoveDialog || defaultProps.removeDialog;
    var editable = (0, hooks_1.useEditable)(props.editable);
    var fields = (0, SchedulerContext_1.useSchedulerFieldsContext)();
    var _a = (0, SchedulerContext_1.useSchedulerDataContext)(), data = _a[0], dispatchData = _a[1];
    var _b = React.useState(null), series = _b[0], setSeries = _b[1];
    var _c = (0, useControlledState_1.useControlledState)(null, propRemoveItem, onRemoveItemChange), removeItem = _c[0], setRemoveItem = _c[1];
    var _d = (0, useControlledState_1.useControlledState)(false, propShowRemoveDialog, onShowRemoveDialogChange), showRemoveDialog = _d[0], setShowRemoveDialog = _d[1];
    var _e = (0, useControlledState_1.useControlledState)(false, propShowOccurrenceDialog, onShowOccurrenceDialogChange), showOccurrenceDialog = _e[0], setShowOccurrenceDialog = _e[1];
    var handleRemoveClick = React.useCallback(function (event) {
        if (!editable.remove) {
            return;
        }
        setRemoveItem(props.dataItem, event);
        if (props.isRecurring) {
            setShowOccurrenceDialog(true, event);
        }
        else {
            setShowRemoveDialog(true, event);
        }
    }, [
        setRemoveItem, props.dataItem,
        props.isRecurring,
        setShowOccurrenceDialog,
        setShowRemoveDialog
    ]);
    var handleCancel = React.useCallback(function (event) {
        setSeries(null);
        setRemoveItem(null, event);
        setShowRemoveDialog(false, event);
        setShowOccurrenceDialog(false, event);
    }, [
        setSeries,
        setRemoveItem,
        setShowRemoveDialog,
        setShowOccurrenceDialog
    ]);
    var handleRemoveConfirm = React.useCallback(function (event) {
        if (onDataAction && removeItem) {
            onDataAction.call(undefined, {
                type: Scheduler_1.DATA_ACTION.remove,
                series: series,
                dataItem: removeItem
            });
        }
        setRemoveItem(null, event);
        setShowRemoveDialog(false, event);
    }, [
        removeItem,
        dispatchData,
        setShowRemoveDialog
    ]);
    var handleRemoveItemChange = React.useCallback(function (value, event) {
        if (!setRemoveItem) {
            return;
        }
        setRemoveItem(value, event);
    }, [setRemoveItem]);
    var handleRemoveDialogChange = React.useCallback(function (value, event) {
        if (!setShowRemoveDialog) {
            return;
        }
        setShowRemoveDialog(value, event);
    }, [setShowRemoveDialog]);
    var handleOccurrenceDialogChange = React.useCallback(function (value, event) {
        if (!setShowOccurrenceDialog) {
            return;
        }
        setShowOccurrenceDialog(value, event);
    }, [setShowOccurrenceDialog]);
    var handleOccurrenceClick = React.useCallback(function (event) {
        if (removeItem) {
            setSeries(false);
            setRemoveItem(props.dataItem, event);
            setShowRemoveDialog(true, event);
        }
        setShowOccurrenceDialog(false, event);
    }, [
        setSeries,
        props.dataItem,
        removeItem,
        setRemoveItem,
        setShowRemoveDialog
    ]);
    var handleSeriesClick = React.useCallback(function (event) {
        if (removeItem) {
            setSeries(true);
            var dataItem = (0, utils_1.findMaster)(removeItem, fields, data);
            setRemoveItem(dataItem, event);
            setShowRemoveDialog(true, event);
        }
        setShowOccurrenceDialog(false, event);
    }, [
        fields,
        removeItem,
        setSeries,
        setRemoveItem,
        setShowRemoveDialog,
        setShowOccurrenceDialog
    ]);
    return (React.createElement(SchedulerEditTaskContext_1.SchedulerEditTaskContext, { remove: [removeItem, handleRemoveItemChange], showRemoveDialog: [showRemoveDialog, handleRemoveDialogChange], showOccurrenceDialog: [showOccurrenceDialog, handleOccurrenceDialogChange] },
        React.createElement(VieTask, __assign({ _ref: viewTask }, taskProps, { onRemoveClick: handleRemoveClick })),
        (showOccurrenceDialog) && (React.createElement(OccurrenceDialog, { dataItem: removeItem, isRemove: removeItem !== null, onClose: handleCancel, onOccurrenceClick: handleOccurrenceClick, onSeriesClick: handleSeriesClick })),
        (showRemoveDialog) && (React.createElement(RemoveDialog, { dataItem: removeItem, onClose: handleCancel, onCancel: handleCancel, onConfirm: handleRemoveConfirm }))));
});
var defaultProps = {
    viewTask: SchedulerViewTask_1.SchedulerViewTask,
    occurrenceDialog: SchedulerOccurrenceDialog_1.SchedulerOccurrenceDialog,
    removeDialog: SchedulerRemoveDialog_1.SchedulerRemoveDialog
};
exports.SchedulerEditTask.defaultProps = defaultProps;
exports.SchedulerEditTask.displayName = 'KendoReactSchedulerEditTask';
