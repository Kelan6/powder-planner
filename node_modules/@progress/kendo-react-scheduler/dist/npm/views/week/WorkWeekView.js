"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkWeekView = void 0;
var React = require("react");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var constants_1 = require("../../constants");
var MultiDayView_1 = require("../day/MultiDayView");
var messages_1 = require("../../messages");
var utils_1 = require("../../utils");
var main_1 = require("../../main");
var WorkWeekView = function (props) {
    var dateRange = (0, main_1.useSchedulerDateRangeContext)();
    var numberOfDays = Math.round((dateRange.end.getTime() - dateRange.start.getTime()) / kendo_date_math_1.MS_PER_DAY);
    return (React.createElement(MultiDayView_1.MultiDayView, __assign({}, props, { step: constants_1.DAYS_IN_WEEK_COUNT, numberOfDays: numberOfDays })));
};
exports.WorkWeekView = WorkWeekView;
var firstDayInWeek = function (date, weekStartDay) {
    if (weekStartDay === void 0) { weekStartDay = kendo_date_math_1.Day.Sunday; }
    var first = date.clone();
    while (first.getDay() !== weekStartDay) {
        first = first.addDays(-1);
    }
    return first;
};
var workWeekViewDateRange = function (_a) {
    var intl = _a.intl, date = _a.date, timezone = _a.timezone, other = __rest(_a, ["intl", "date", "timezone"]);
    var normalized = kendo_date_math_1.ZonedDate.fromLocalDate(date, timezone);
    var workWeekStart = other.workWeekStart !== undefined ? other.workWeekStart : kendo_date_math_1.Day.Monday;
    var workWeekEnd = other.workWeekEnd !== undefined ? other.workWeekEnd : kendo_date_math_1.Day.Friday;
    var days = workWeekEnd < workWeekStart
        ? constants_1.DAYS_IN_WEEK_COUNT + workWeekEnd - workWeekStart + 1
        : workWeekEnd - workWeekStart + 1;
    var firstDate = (0, kendo_date_math_1.getDate)(firstDayInWeek(normalized, workWeekStart));
    var lastDate = (0, kendo_date_math_1.addDays)(firstDate, days);
    var zonedStart = kendo_date_math_1.ZonedDate.fromUTCDate((0, utils_1.toUTCDateTime)(firstDate), timezone);
    var zonedEnd = kendo_date_math_1.ZonedDate.fromUTCDate((0, utils_1.toUTCDateTime)(lastDate), timezone);
    var start = new Date(zonedStart.getTime());
    var end = new Date(zonedEnd.getTime());
    return {
        start: start,
        end: end,
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
var defaultProps = {
    name: 'work-week',
    slotDuration: 60,
    slotDivisions: 2,
    numberOfDays: 7,
    dateRange: workWeekViewDateRange,
    title: function (localization) { return localization.toLanguageString(messages_1.workWeekViewTitle, messages_1.messages[messages_1.workWeekViewTitle]); },
    workWeekStart: kendo_date_math_1.Day.Monday,
    workWeekEnd: kendo_date_math_1.Day.Friday,
    selectedDateFormat: '{0:D} - {1:D}',
    selectedShortDateFormat: '{0:d} - {1:d}'
};
exports.WorkWeekView.defaultProps = defaultProps;
exports.WorkWeekView.displayName = 'KendoReactSchedulerWorkWeekView';
