"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgendaView = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var BaseView_1 = require("../../components/BaseView");
var VerticalResourceIterator_1 = require("../common/VerticalResourceIterator");
var messages_1 = require("../../messages");
var hooks_1 = require("../../hooks");
var constants_1 = require("../../constants");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var rangeService_1 = require("../../services/rangeService");
var occurrenceService_1 = require("../../services/occurrenceService");
var itemsService_1 = require("../../services/itemsService");
var utils_1 = require("../../utils");
var services_1 = require("../../services");
var SchedulerEditTask_1 = require("../../tasks/SchedulerEditTask");
var SchedulerEditSlot_1 = require("../../slots/SchedulerEditSlot");
var SchedulerContext_1 = require("../../context/SchedulerContext");
var SchedulerResourceIteratorContext_1 = require("../../context/SchedulerResourceIteratorContext");
/**
 * Represents the KendoReact [AgendaView]({% slug agenda_view_scheduler %}) Component.
 */
var AgendaView = function (props) {
    var _a = (0, SchedulerContext_1.useSchedulerPropsContext)(), group = _a.group, timezone = _a.timezone, propResources = _a.resources;
    var EditTask = props.editTask || SchedulerEditTask_1.SchedulerEditTask;
    var EditSlot = props.editSlot || SchedulerEditSlot_1.SchedulerEditSlot;
    var element = React.useRef(null);
    var intl = (0, kendo_react_intl_1.useInternationalization)();
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var data = (0, SchedulerContext_1.useSchedulerDataContext)()[0];
    var groups = (0, SchedulerContext_1.useSchedulerGroupsContext)();
    var fields = (0, SchedulerContext_1.useSchedulerFieldsContext)();
    var dateRange = (0, SchedulerContext_1.useSchedulerDateRangeContext)();
    var ranges = React.useMemo(function () { return (0, rangeService_1.toRanges)(dateRange, { step: kendo_date_math_1.MS_PER_DAY, timezone: timezone }); }, [
        dateRange.start.getTime(),
        dateRange.end.getTime(),
        timezone
    ]);
    var slots = React.useMemo(function () { return (0, services_1.toSlots)(dateRange, { step: kendo_date_math_1.MS_PER_DAY }, { groups: groups, ranges: ranges }); }, [
        dateRange.start.getTime(),
        dateRange.end.getTime(),
        timezone,
        groups,
        ranges
    ]);
    var occurrences = React.useMemo(function () { return (0, occurrenceService_1.toOccurrences)(data, { dateRange: dateRange, fields: fields, timezone: timezone }); }, [data, dateRange.start.getTime(), dateRange.end.getTime(), fields, timezone]);
    var items = React.useMemo(function () { return (0, itemsService_1.toItems)(occurrences, { timezone: timezone }, { groups: groups, ranges: ranges }); }, [occurrences, timezone, groups, ranges]);
    var className = React.useMemo(function () { return (0, kendo_react_common_1.classNames)('k-scheduler-agendaview', props.className); }, [props.className]);
    (0, hooks_1.useCellSync)({ element: element, selector: '.k-scheduler-datecolumn', explicitDepth: false });
    (0, hooks_1.useCellSync)({ element: element, selector: '.k-scheduler-timecolumn', explicitDepth: false });
    React.useMemo(function () { return (0, utils_1.mapItemsToSlots)(items, slots, true); }, [items, slots]);
    React.useMemo(function () { return (0, utils_1.mapSlotsToItems)(items, slots, true); }, [items, slots]);
    return (React.createElement(BaseView_1.BaseView, { ref: element, id: props.id, style: props.style, className: className, props: props, slots: items, ranges: ranges },
        React.createElement("div", { className: "k-scheduler-head" },
            React.createElement(VerticalResourceIterator_1.VerticalResourceIterator, { resources: propResources, group: group },
                React.createElement(SchedulerResourceIteratorContext_1.SchedulerResourceIteratorContext.Consumer, null, function (_a) {
                    var groupIndex = _a.groupIndex;
                    return (React.createElement("div", { className: "k-scheduler-row", key: groupIndex },
                        React.createElement("div", { className: "k-scheduler-cell k-heading-cell k-group-cell k-scheduler-datecolumn" }, localization.toLanguageString(messages_1.dateTitle, messages_1.messages[messages_1.dateTitle])),
                        React.createElement("div", { className: "k-scheduler-cell k-heading-cell k-group-cell k-scheduler-timecolumn" }, localization.toLanguageString(messages_1.timeTitle, messages_1.messages[messages_1.timeTitle])),
                        React.createElement("div", { className: "k-scheduler-cell k-heading-cell k-scheduler-eventcolumn" }, localization.toLanguageString(messages_1.eventTitle, messages_1.messages[messages_1.eventTitle]))));
                }))),
        React.createElement("div", { className: "k-scheduler-body" },
            React.createElement(VerticalResourceIterator_1.VerticalResourceIterator, { resources: propResources, group: group, nested: true },
                React.createElement(SchedulerResourceIteratorContext_1.SchedulerResourceIteratorContext.Consumer, null, function (_a) {
                    var groupIndex = _a.groupIndex;
                    return slots
                        .filter(function (slot) { return slot.group.index === (groupIndex || 0); })
                        .map(function (slot, slotIndex, filtered) {
                        return (React.createElement("div", { className: "k-scheduler-row  k-scheduler-content", key: "".concat(groupIndex, ":").concat(slotIndex) },
                            React.createElement(EditSlot, __assign({}, slot, { editable: props.editable, row: (filtered.length * (groupIndex || 0) + slotIndex), col: 0, slot: props.slot, viewSlot: props.viewSlot, className: "k-scheduler-datecolumn k-group-cell" }),
                                React.createElement("div", null,
                                    React.createElement("strong", { className: "k-scheduler-agendaday" }, intl.formatDate(slot.zonedStart, 'dd')),
                                    React.createElement("em", { className: "k-scheduler-agendaweek" }, intl.formatDate(slot.zonedStart, 'EEEE')),
                                    React.createElement("span", { className: "k-scheduler-agendadate" }, intl.formatDate(slot.zonedStart, 'y')))),
                            React.createElement("div", { className: "k-scheduler-cell k-group-content" }, slot.items.length
                                ? slot.items.map(function (item, itemIndex) { return (React.createElement("div", { className: "k-scheduler-row", key: itemIndex },
                                    React.createElement("div", { className: "k-scheduler-cell k-scheduler-timecolumn" },
                                        React.createElement("div", null,
                                            item.tail && React.createElement("span", { className: "k-icon k-i-caret-alt-left" }),
                                            item.isAllDay
                                                ? localization.toLanguageString(messages_1.allDay, messages_1.messages[messages_1.allDay])
                                                : getTimeFormat(intl, item),
                                            item.head && React.createElement("span", { className: "k-icon k-i-caret-alt-right" }))),
                                    React.createElement("div", { className: "k-scheduler-cell" },
                                        React.createElement(EditTask, __assign({ key: "".concat(slotIndex, ":").concat(itemIndex) }, item, { onDataAction: props.onDataAction, task: props.task, viewTask: props.viewTask, editable: props.editable }))))); })
                                : React.createElement("div", { className: "k-scheduler-cell k-heading-cell k-group-cell" }, localization.toLanguageString(messages_1.noEvents, messages_1.messages[messages_1.noEvents])))));
                    });
                })))));
};
exports.AgendaView = AgendaView;
var getTimeFormat = function (intl, props) {
    var format = '{0:t}-{1:t}';
    if (props.head) {
        format = '{0:t}';
    }
    else if (props.tail) {
        format = '{1:t}';
    }
    return intl.format(format, props.zonedStart, props.zonedEnd);
};
var GET_START_DATE = function (date) { return (0, kendo_date_math_1.getDate)(date); };
var GET_END_DATE = function (start, numberOfDays) { return (0, kendo_date_math_1.getDate)((0, kendo_date_math_1.addDays)(start, numberOfDays || 1)); };
var agendaViewDateRange = function (_a) {
    var intl = _a.intl, date = _a.date, _b = _a.numberOfDays, numberOfDays = _b === void 0 ? 1 : _b, timezone = _a.timezone;
    var normalized = kendo_date_math_1.ZonedDate.fromLocalDate(date, timezone);
    var firstDate = numberOfDays === constants_1.DAYS_IN_WEEK_COUNT
        ? GET_START_DATE((0, kendo_date_math_1.firstDayInWeek)(normalized, intl.firstDay()))
        : GET_START_DATE(normalized);
    var lastDate = GET_END_DATE(firstDate, numberOfDays);
    var zonedStart = kendo_date_math_1.ZonedDate.fromUTCDate((0, utils_1.toUTCDateTime)(firstDate), timezone);
    var zonedEnd = kendo_date_math_1.ZonedDate.fromUTCDate((0, utils_1.toUTCDateTime)(lastDate), timezone);
    var start = new Date(zonedStart.getTime());
    var end = new Date(zonedEnd.getTime());
    return {
        start: start,
        end: end,
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
var defaultProps = {
    name: 'agenda',
    title: function (localization) { return localization.toLanguageString(messages_1.agendaViewTitle, messages_1.messages[messages_1.agendaViewTitle]); },
    dateRange: agendaViewDateRange,
    selectedDateFormat: '{0:D} - {1:D}',
    selectedShortDateFormat: '{0:d} - {1:d}',
    slotDuration: 60 * 24,
    slotDivision: 1,
    step: constants_1.DAYS_IN_WEEK_COUNT,
    numberOfDays: constants_1.DAYS_IN_WEEK_COUNT
};
var propTypes = {
    title: PropTypes.any
};
exports.AgendaView.propTypes = propTypes;
exports.AgendaView.defaultProps = defaultProps;
