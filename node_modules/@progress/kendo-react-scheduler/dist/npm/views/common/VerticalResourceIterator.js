"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerticalResourceIterator = void 0;
var React = require("react");
var utils_1 = require("./utils");
var SchedulerResourceIteratorContext_1 = require("../../context/SchedulerResourceIteratorContext");
/** @hidden */
var VerticalResourceIterator = function (props) {
    var nested = props.nested, wrapGroup = props.wrapGroup, children = props.children;
    var cellContent = props.cellContent || DefaultCellContent;
    var resources = (0, utils_1.toGroupResources)(props.group, props.resources);
    var depth = 0;
    var groupIndex = 0;
    return (React.createElement("div", { className: "k-scheduler-group" }, nested
        ? wrapGroup
            ? (React.createElement("div", { className: "k-scheduler-row" },
                React.createElement("div", { className: "k-sticky-cell" }, renderResourcesRecursivelyWrapped({ resources: resources, children: children, cellContent: cellContent, depth: depth, groupIndex: groupIndex })),
                React.createElement("div", { className: "k-scheduler-cell k-group-content" }, renderResourcesRecursively({ resources: resources, children: children, cellContent: cellContent, depth: depth, groupIndex: groupIndex }, false))))
            : renderResourcesRecursively({ resources: resources, children: children, cellContent: cellContent, depth: depth, groupIndex: groupIndex }, true)
        : wrapGroup
            ? React.createElement("div", { className: "k-scheduler-row" },
                React.createElement("div", { className: "k-sticky-cell" }, renderResourcesWrapped({ resources: resources, children: children, cellContent: cellContent, depth: depth, groupIndex: groupIndex })),
                React.createElement("div", { className: "k-scheduler-cell k-group-content" }, children))
            : renderResources({ resources: resources, children: children, cellContent: cellContent, depth: depth, groupIndex: groupIndex })));
};
exports.VerticalResourceIterator = VerticalResourceIterator;
var renderResourcesWrapped = function (args) {
    return (React.createElement("div", { className: "k-scheduler-row" },
        React.createElement("div", { className: "k-scheduler-row" }, args.resources.map(function (_, index) { return (React.createElement("div", { key: index, className: "k-scheduler-cell k-resource-cell k-heading-cell", "data-depth-index": index })); }))));
};
var renderResourcesRecursively = function (args, headers) {
    if (headers === void 0) { headers = true; }
    var resources = args.resources, children = args.children, cellContent = args.cellContent, groupIndex = args.groupIndex, depth = args.depth;
    var hasGroups = resources.length > 0;
    if (depth === resources.length || !hasGroups) {
        return (React.createElement(SchedulerResourceIteratorContext_1.SchedulerResourceIteratorContext.Provider, { value: { resource: resources[depth], groupIndex: hasGroups ? groupIndex : 0 } }, children));
    }
    var dataLength = resources[depth].data.length;
    return resources[depth].data.map(function (dataItem, dataIndex) { return (React.createElement("div", { key: dataIndex, className: "k-scheduler-row" },
        headers && React.createElement("div", { className: "k-scheduler-cell k-group-cell k-heading-cell", "data-depth-index": depth }, dataItem.text),
        React.createElement("div", { className: "k-scheduler-cell k-group-content k-resource-row", "data-depth-index": depth, "data-resource-index": (dataLength * groupIndex) + dataIndex }, renderResourcesRecursively({
            resources: resources,
            children: children,
            cellContent: cellContent,
            groupIndex: (dataLength * groupIndex) + dataIndex,
            depth: depth + 1
        }, headers)))); });
};
var renderResourcesRecursivelyWrapped = function (args) {
    var resources = args.resources, children = args.children, cellContent = args.cellContent, groupIndex = args.groupIndex, depth = args.depth;
    var dataLength = resources.length ? resources[depth].data.length : 0;
    if (!resources[depth]) {
        return null;
    }
    return (resources[depth].data.map(function (dataItem, dataIndex) { return (React.createElement("div", { key: dataIndex, className: "k-scheduler-row" },
        React.createElement("div", { className: "k-scheduler-cell k-resource-cell k-resource-row k-heading-cell", "data-depth-index": depth, "data-resource-index": (dataLength * groupIndex) + dataIndex }, dataItem.text),
        depth + 1 !== resources.length && React.createElement("div", { className: "k-scheduler-cell k-resource-content" }, renderResourcesRecursivelyWrapped({
            resources: resources,
            children: children,
            cellContent: cellContent,
            groupIndex: (dataLength * groupIndex) + dataIndex,
            depth: depth + 1
        })))); }));
};
var renderGroupContentRecursively = function (args) {
    var resources = args.resources, children = args.children, cellContent = args.cellContent, groupIndex = args.groupIndex, depth = args.depth;
    var hasGroups = resources.length > 0;
    if (depth === resources.length || !hasGroups) {
        return (React.createElement(SchedulerResourceIteratorContext_1.SchedulerResourceIteratorContext.Provider, { value: { resource: resources[depth], groupIndex: hasGroups ? groupIndex : undefined } }, children));
    }
    var dataLength = resources[depth].data.length;
    return resources[depth].data.map(function (_dataItem, dataIndex) { return (React.createElement("div", { key: dataIndex, className: "k-scheduler-row" },
        React.createElement("div", { className: "k-scheduler-cell k-group-content" }, renderGroupContentRecursively({
            resources: resources,
            children: children,
            cellContent: cellContent,
            groupIndex: (dataLength * groupIndex) + dataIndex,
            depth: depth + 1
        })))); });
};
var renderResources = function (args) {
    var resources = args.resources, children = args.children, groupIndex = args.groupIndex, cellContent = args.cellContent;
    return (React.createElement("div", { className: "k-scheduler-row" },
        cellPrefix(resources),
        cellContent,
        cellChildren(children, resources, groupIndex)));
};
var cellChildren = function (children, resources, groupIndex) {
    var hasGroups = resources.length > 0;
    return (React.createElement("div", { className: "k-scheduler-cell k-group-content" },
        React.createElement(SchedulerResourceIteratorContext_1.SchedulerResourceIteratorContext.Provider, { value: { resource: resources[groupIndex], groupIndex: hasGroups ? groupIndex : undefined } }, children)));
};
var cellPrefix = function (resources) {
    return resources.map(function (_, index) { return (React.createElement("div", { key: index, className: "k-scheduler-cell k-group-cell k-heading-cell", "data-depth-index": index })); });
};
exports.VerticalResourceIterator.displayName = 'KendoReactSchedulerVerticalResourceIterator';
var DefaultCellContent = null;
