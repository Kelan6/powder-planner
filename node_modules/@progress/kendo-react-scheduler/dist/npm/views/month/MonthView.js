"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthView = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var BaseView_1 = require("../../components/BaseView");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var VerticalResourceIterator_1 = require("../common/VerticalResourceIterator");
var HorizontalResourceIterator_1 = require("../common/HorizontalResourceIterator");
var utils_1 = require("../../utils");
var messages_1 = require("../../messages");
var SchedulerEditSlot_1 = require("../../slots/SchedulerEditSlot");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var constants_1 = require("../../constants");
var rangeService_1 = require("../../services/rangeService");
var slotsService_1 = require("../../services/slotsService");
var occurrenceService_1 = require("../../services/occurrenceService");
var itemsService_1 = require("../../services/itemsService");
var ShowMoreItemsButton_1 = require("../../components/ShowMoreItemsButton");
var SchedulerEditItem_1 = require("../../items/SchedulerEditItem");
var SchedulerContext_1 = require("../../context/SchedulerContext");
var SchedulerResourceIteratorContext_1 = require("../../context/SchedulerResourceIteratorContext");
var DateHeaderCell_1 = require("../../components/DateHeaderCell");
var DAY_FORMAT = { skeleton: 'dd' };
/**
 * Represents the KendoReact [MonthView]({% slug month_view_scheduler %}) Component.
 */
var MonthView = function (props) {
    var _a = (0, SchedulerContext_1.useSchedulerPropsContext)(), group = _a.group, timezone = _a.timezone, propResources = _a.resources;
    var EditItem = props.editItem || SchedulerEditItem_1.SchedulerEditItem;
    var EditSlot = props.editSlot || SchedulerEditSlot_1.SchedulerEditSlot;
    var data = (0, SchedulerContext_1.useSchedulerDataContext)()[0];
    var _b = (0, SchedulerContext_1.useSchedulerDateContext)(), setDate = _b[1];
    var _c = (0, SchedulerContext_1.useSchedulerActiveViewContext)(), setView = _c[1];
    var views = (0, SchedulerContext_1.useSchedulerViewsContext)();
    var groups = (0, SchedulerContext_1.useSchedulerGroupsContext)();
    var orientation = (0, SchedulerContext_1.useSchedulerOrientationContext)();
    var dateRange = (0, SchedulerContext_1.useSchedulerDateRangeContext)();
    var intl = (0, kendo_react_intl_1.useInternationalization)();
    var fields = (0, SchedulerContext_1.useSchedulerFieldsContext)();
    var itemsPerSlot = props.itemsPerSlot || defaultProps.itemsPerSlot;
    var ranges = React.useMemo(function () { return (0, rangeService_1.toRanges)(dateRange, { step: (kendo_date_math_1.MS_PER_DAY * constants_1.DAYS_IN_WEEK_COUNT), timezone: timezone }); }, [dateRange.start.getTime(), dateRange.end.getTime(), timezone]);
    var slots = React.useMemo(function () { return (0, slotsService_1.toSlots)(dateRange, { step: kendo_date_math_1.MS_PER_DAY }, { groups: groups, ranges: ranges }); }, [
        dateRange.start.getTime(),
        dateRange.end.getTime(),
        groups,
        ranges
    ]);
    var occurrences = React.useMemo(function () { return (0, occurrenceService_1.toOccurrences)(data, { dateRange: dateRange, fields: fields, timezone: timezone }); }, [data, dateRange.start.getTime(), dateRange.end.getTime(), fields, timezone]);
    var items = React.useMemo(function () { return (0, itemsService_1.toItems)(occurrences, { timezone: timezone }, { groups: groups, ranges: ranges }); }, [occurrences, timezone, groups, ranges]);
    var handleShowMoreItemsClick = React.useCallback(function (event) {
        var newView = views.find(function (vw) { return vw.props.name === 'day'; });
        if (!setView || !newView || !newView.props.name || !event.target.slot) {
            return;
        }
        setView(newView.props.name, event);
        setDate(event.target.slot.start, event);
    }, [
        setView,
        views
    ]);
    React.useMemo(function () { return (0, utils_1.mapItemsToSlots)(items, slots, true); }, [items, slots]);
    React.useMemo(function () { return (0, utils_1.mapSlotsToItems)(items, slots, true); }, [items, slots]);
    var head = (React.createElement(SchedulerResourceIteratorContext_1.SchedulerResourceIteratorContext.Consumer, null, function (_a) {
        var groupIndex = _a.groupIndex;
        return (React.createElement("div", { className: "k-scheduler-row", key: groupIndex }, slots
            .filter(function (slot) { return slot.group.index === groupIndex && slot.range.index === 0; })
            .map(function (slot, slotIndex) { return (React.createElement(DateHeaderCell_1.DateHeaderCell, { as: props.dateHeaderCell, key: slotIndex, "data-dayslot-index": slotIndex, date: kendo_date_math_1.ZonedDate.fromLocalDate(new Date(slot.zonedEnd.getTime() - ((slot.zonedEnd.getTime() - slot.zonedStart.getTime()) / 2)), timezone), start: slot.start, end: slot.end, format: { skeleton: 'EEEE' } })); })));
    }));
    var body = (React.createElement(SchedulerResourceIteratorContext_1.SchedulerResourceIteratorContext.Consumer, null, function (_a) {
        var groupIndex = _a.groupIndex;
        return (ranges.map(function (_, rangeIndex) { return (React.createElement("div", { className: "k-scheduler-row", key: rangeIndex }, slots
            .filter(function (slot) { return slot.group.index === groupIndex && slot.range.index === rangeIndex; })
            .map(function (slot, slotIndex, filtered) { return (React.createElement(EditSlot, __assign({ slot: props.slot, viewSlot: props.viewSlot, key: slotIndex, form: props.form }, slot, { expandable: { offsetTop: 30, offsetBottom: (itemsPerSlot < slot.items.length) ? 15 : 0 }, onDataAction: props.onDataAction, col: orientation === 'horizontal'
                ? ((filtered.length * (groupIndex || 0)) + slotIndex)
                : slotIndex, row: orientation === 'horizontal'
                ? rangeIndex
                : ((ranges.length * (groupIndex || 0)) + rangeIndex), editable: props.editable }),
            React.createElement("span", { className: "k-link k-nav-day" }, intl.formatDate(new Date(slot.end.getTime() - ((slot.end.getTime() - slot.start.getTime()) / 2)), DAY_FORMAT)),
            (itemsPerSlot < slot.items.length) && (React.createElement(ShowMoreItemsButton_1.ShowMoreItemsButton, { slot: slot, onClick: handleShowMoreItemsClick })))); }))); }));
    }));
    return (React.createElement(BaseView_1.BaseView, { props: props, slots: slots, ranges: ranges, className: (0, kendo_react_common_1.classNames)('k-scheduler-monthview', props.className) },
        React.createElement("div", { className: "k-scheduler-head" }, orientation === 'horizontal'
            ? React.createElement(HorizontalResourceIterator_1.HorizontalResourceIterator, { nested: true, resources: propResources, group: group }, head)
            : React.createElement(VerticalResourceIterator_1.VerticalResourceIterator, { resources: propResources, group: group }, head)),
        React.createElement("div", { className: "k-scheduler-body" },
            orientation === 'horizontal'
                ? React.createElement(HorizontalResourceIterator_1.HorizontalResourceIterator, { resources: propResources, group: group }, body)
                : React.createElement(VerticalResourceIterator_1.VerticalResourceIterator, { nested: true, resources: propResources, group: group }, body),
            items
                .filter(function (item) { return item.order === null || item.order < itemsPerSlot; })
                .sort(utils_1.orderSort)
                .map(function (item) { return (React.createElement(EditItem, __assign({ item: props.item, viewItem: props.viewItem, form: props.form, key: item.isRecurring
                    ? "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index, ":").concat(item.originalStart)
                    : "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index) }, item, { onDataAction: props.onDataAction, style: { transform: 'translateY(30px)' }, vertical: false, editable: props.editable, ignoreIsAllDay: true }))); }))));
};
exports.MonthView = MonthView;
var monthViewDateRange = function (_a) {
    var intl = _a.intl, date = _a.date, timezone = _a.timezone;
    // The DateRange start from the first day of the week containing the first day of the month.
    // I know it sounds strange, but take a look and a wall-calendar!
    var firstDay = (0, kendo_date_math_1.firstDayInWeek)((0, kendo_date_math_1.firstDayOfMonth)((0, kendo_date_math_1.getDate)(date)), intl.firstDay());
    var lastDay = (0, kendo_date_math_1.addDays)((0, kendo_date_math_1.firstDayInWeek)((0, kendo_date_math_1.lastDayOfMonth)((0, kendo_date_math_1.getDate)(date)), intl.firstDay()), constants_1.DAYS_IN_WEEK_COUNT);
    var zonedStart = kendo_date_math_1.ZonedDate.fromUTCDate((0, utils_1.toUTCDateTime)(firstDay), timezone);
    var zonedEnd = kendo_date_math_1.ZonedDate.fromUTCDate((0, utils_1.toUTCDateTime)(lastDay), timezone);
    var start = new Date(zonedStart.getTime());
    var end = new Date(zonedEnd.getTime());
    return {
        start: start,
        end: end,
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
var defaultProps = {
    name: 'month',
    dateRange: monthViewDateRange,
    slotDuration: 24 * 60,
    slotDivision: 1,
    itemsPerSlot: 2,
    numberOfDays: 31,
    title: function (localization) { return localization.toLanguageString(messages_1.monthViewTitle, messages_1.messages[messages_1.monthViewTitle]); },
    selectedDateFormat: '{0:Y}',
    selectedShortDateFormat: '{0:Y}'
};
var propTypes = {
    itemsPerSlot: PropTypes.number
};
exports.MonthView.defaultProps = defaultProps;
exports.MonthView.propTypes = propTypes;
exports.MonthView.displayName = 'KendoReactSchedulerMonthView';
