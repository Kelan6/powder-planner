"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerItem = void 0;
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("../messages");
var hooks_1 = require("../hooks");
var utils_1 = require("../utils");
/**
 * Represents the default `item` component rendered by the [KendoReact Scheduler component]({% slug overview_scheduler %}).
 */
exports.SchedulerItem = React.forwardRef(function (props, ref) {
    var 
    // Focus
    onFocus = props.onFocus, onBlur = props.onBlur, 
    // Mouse
    onMouseDown = props.onMouseDown, onClick = props.onClick, onMouseUp = props.onMouseUp, onMouseOut = props.onMouseOut, onMouseOver = props.onMouseOver, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onDoubleClick = props.onDoubleClick, onRemoveClick = props.onRemoveClick, 
    // Keyboard
    onKeyUp = props.onKeyUp, onKeyDown = props.onKeyDown, onKeyPress = props.onKeyPress, 
    // Drag
    onPress = props.onPress, onDrag = props.onDrag, onRelease = props.onRelease, 
    // Resize
    onResizePress = props.onResizePress, onResizeEndDrag = props.onResizeEndDrag, onResizeRelease = props.onResizeRelease, onResizeStartDrag = props.onResizeStartDrag;
    var _a = (0, hooks_1.useSchedulerItem)(props, ref), item = _a.item, element = _a.element;
    var resizeEast = React.useRef(null);
    var resizeWest = React.useRef(null);
    var resizeNorth = React.useRef(null);
    var resizeSouth = React.useRef(null);
    var editable = (0, hooks_1.useEditable)(props.editable);
    var intl = (0, kendo_react_intl_1.useInternationalization)();
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var deleteMessage = localization.toLanguageString(messages_1.deleteTitle, messages_1.messages[messages_1.deleteTitle]);
    var resource = props.group.resources.find(function (r) { return Boolean(r.colorField && r[r.colorField] !== '' && r[r.colorField] !== undefined); });
    var color = resource && resource.colorField && resource[resource.colorField];
    var tabIndex = props.tabIndex !== undefined
        ? props.tabIndex === null
            ? undefined
            : props.tabIndex
        : props.selected
            ? 0
            : -1;
    var className = React.useMemo(function () { return (0, kendo_react_common_1.classNames)({
        'k-event': !props.resizeHint,
        'k-selected': props.selected && editable.select,
        'k-event-drag-hint': props.dragHint,
        'k-scheduler-marquee': props.resizeHint,
        'k-marquee': props.resizeHint,
        'k-first': (props.resizeHint && !props.tail),
        'k-last': (props.resizeHint && !props.head)
    }, props.className); }, [
        props.resizeHint,
        props.selected,
        props.dragHint,
        props.tail,
        props.head,
        props.className,
        editable.select
    ]);
    var eventLabel = React.useMemo(function () { return "".concat((0, utils_1.formatEventTime)(intl, props.zonedStart, props.zonedEnd, props.isAllDay), ", ").concat(props.title); }, [intl, props.isAllDay, props.title, props.zonedEnd, props.zonedStart]);
    var style = React.useMemo(function () { return (__assign({ cursor: 'pointer', userSelect: 'none', borderColor: !props.resizeHint ? color : undefined, backgroundColor: !props.resizeHint ? color : undefined, touchAction: 'none' }, props.style)); }, [color, props.style, props.resizeHint]);
    // Handlers
    // Focus Handlers
    var handleFocus = React.useCallback(function (syntheticEvent) {
        if (!onFocus) {
            return;
        }
        onFocus.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onFocus, item]);
    var handleBlur = React.useCallback(function (syntheticEvent) {
        if (!onBlur) {
            return;
        }
        onBlur.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onBlur, item]);
    // Mouse Handlers
    var handleMouseDown = React.useCallback(function (syntheticEvent) {
        if (!onMouseDown) {
            return;
        }
        onMouseDown.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onMouseDown, item]);
    var handleClick = React.useCallback(function (syntheticEvent) {
        if (!onClick) {
            return;
        }
        onClick.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onClick, item]);
    var handleMouseUp = React.useCallback(function (syntheticEvent) {
        if (!onMouseUp) {
            return;
        }
        onMouseUp.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onMouseUp, item]);
    var handleMouseOver = React.useCallback(function (syntheticEvent) {
        if (!onMouseOver) {
            return;
        }
        onMouseOver.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onMouseOver, item]);
    var handleMouseOut = React.useCallback(function (syntheticEvent) {
        if (!onMouseOut) {
            return;
        }
        onMouseOut.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onMouseOut, item]);
    var handleMouseEnter = React.useCallback(function (syntheticEvent) {
        if (!onMouseEnter) {
            return;
        }
        onMouseEnter.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onMouseEnter, item]);
    var handleMouseLeave = React.useCallback(function (syntheticEvent) {
        if (!onMouseLeave) {
            return;
        }
        onMouseLeave.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onMouseLeave, item]);
    var handleDoubleClick = React.useCallback(function (syntheticEvent) {
        if (!onDoubleClick) {
            return;
        }
        onDoubleClick.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onDoubleClick, item]);
    var handleRemoveClick = React.useCallback(function (syntheticEvent) {
        if (!onRemoveClick) {
            return;
        }
        onRemoveClick.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onRemoveClick, item]);
    // Keyboard Handlers
    var handleKeyDown = React.useCallback(function (syntheticEvent) {
        if (!onKeyDown) {
            return;
        }
        onKeyDown.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onKeyDown, item]);
    var handleKeyPress = React.useCallback(function (syntheticEvent) {
        if (!onKeyPress) {
            return;
        }
        onKeyPress.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onKeyPress, item]);
    var handleKeyUp = React.useCallback(function (syntheticEvent) {
        if (!onKeyUp) {
            return;
        }
        onKeyUp.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: item.current
        });
    }, [onKeyUp, item]);
    // Drag Handlers
    var handlePress = React.useCallback(function (dragEvent) {
        if (!onPress) {
            return;
        }
        onPress.call(undefined, {
            dragEvent: dragEvent,
            target: item.current
        });
    }, [onPress, item]);
    var handleDrag = React.useCallback(function (dragEvent) {
        if (!onDrag) {
            return;
        }
        onDrag.call(undefined, {
            dragEvent: dragEvent,
            target: item.current
        });
    }, [onDrag, item]);
    var handleRelease = React.useCallback(function (dragEvent) {
        if (!onRelease) {
            return;
        }
        onRelease.call(undefined, {
            dragEvent: dragEvent,
            target: item.current
        });
    }, [onRelease, item]);
    // Resize Handlers
    var handleResizePress = React.useCallback(function (dragEvent) {
        if (!onResizePress) {
            return;
        }
        onResizePress.call(undefined, {
            dragEvent: dragEvent,
            target: item.current
        });
    }, [onResizePress, item]);
    var handleResizeStartDrag = React.useCallback(function (dragEvent) {
        if (!onResizeStartDrag) {
            return;
        }
        onResizeStartDrag.call(undefined, {
            dragEvent: dragEvent,
            target: item.current
        });
    }, [onResizeStartDrag, item]);
    var handleResizeEndDrag = React.useCallback(function (dragEvent) {
        if (!onResizeEndDrag) {
            return;
        }
        onResizeEndDrag.call(undefined, {
            dragEvent: dragEvent,
            target: item.current
        });
    }, [onResizeEndDrag, item]);
    var handleResizeRelease = React.useCallback(function (dragEvent) {
        if (!onResizeRelease) {
            return;
        }
        onResizeRelease.call(undefined, {
            dragEvent: dragEvent,
            target: item.current
        });
    }, [onResizeRelease, item]);
    // Effects
    // Drag Effects
    (0, kendo_react_common_1.useDraggable)(element, {
        onPress: handlePress,
        onDrag: handleDrag,
        onRelease: handleRelease
    });
    // Resize Effects
    (0, kendo_react_common_1.useDraggable)(resizeEast, {
        onPress: handleResizePress,
        onDrag: handleResizeEndDrag,
        onRelease: handleResizeRelease
    });
    (0, kendo_react_common_1.useDraggable)(resizeWest, {
        onPress: handleResizePress,
        onDrag: handleResizeStartDrag,
        onRelease: handleResizeRelease
    });
    (0, kendo_react_common_1.useDraggable)(resizeNorth, {
        onPress: handleResizePress,
        onDrag: handleResizeStartDrag,
        onRelease: handleResizeRelease
    });
    (0, kendo_react_common_1.useDraggable)(resizeSouth, {
        onPress: handleResizePress,
        onDrag: handleResizeEndDrag,
        onRelease: handleResizeRelease
    });
    return (React.createElement("div", { ref: element, id: props.id, style: style, tabIndex: tabIndex, className: className, "aria-label": eventLabel, "aria-selected": props.selected || undefined, 
        // Focus
        onFocus: handleFocus, onBlur: handleBlur, 
        // Mouse
        onMouseUp: handleMouseUp, onMouseDown: handleMouseDown, onClick: handleClick, onMouseOver: handleMouseOver, onMouseOut: handleMouseOut, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, onDoubleClick: handleDoubleClick, 
        // Keyboard
        onKeyDown: handleKeyDown, onKeyPress: handleKeyPress, onKeyUp: handleKeyUp, "data-group-index": props.group.index, "data-range-index": props.range.index },
        props.children,
        (!props.resizeHint) && React.createElement("span", { className: "k-event-actions" },
            editable.remove
                && (React.createElement("a", { tabIndex: -1, "aria-hidden": "true", className: "k-link k-event-delete", title: deleteMessage, "aria-label": deleteMessage, onClick: handleRemoveClick },
                    React.createElement("span", { className: "k-icon k-i-close" }))),
            props.head && React.createElement("span", { className: "k-icon k-i-caret-alt-right" })),
        (editable.resize && props.vertical)
            && (React.createElement(React.Fragment, null,
                React.createElement("span", { className: "k-resize-handle k-resize-n", ref: resizeNorth }),
                React.createElement("span", { className: "k-resize-handle k-resize-s", ref: resizeSouth }))),
        (editable.resize && !props.vertical)
            && (React.createElement(React.Fragment, null,
                React.createElement("span", { className: "k-resize-handle k-resize-w", ref: resizeWest }),
                React.createElement("span", { className: "k-resize-handle k-resize-e", ref: resizeEast }))),
        props.resizeHint && (React.createElement(React.Fragment, null,
            React.createElement("div", { className: "k-marquee-color", style: { borderColor: color, backgroundColor: color } }),
            React.createElement("div", { className: "k-marquee-text" },
                !props.tail && React.createElement("div", { className: "k-label-top" }, intl.formatDate(props.zonedStart, props.format)),
                !props.head && React.createElement("div", { className: "k-label-bottom" }, intl.formatDate(props.zonedEnd, props.format)))))));
});
exports.SchedulerItem.displayName = 'KendoReactSchedulerItem';
