import * as React from 'react';
import { Slot, SchedulerSlotMouseEvent, SchedulerSlotKeyboardEvent, SchedulerSlotFocusEvent, EditableProp } from '../models';
/**
 * Represents the props of the KendoReact [SchedulerSlot]({% slug api_scheduler_schedulerslot %}) component.
 */
export interface SchedulerSlotProps extends Slot {
    /** @hidden */
    _ref: React.RefObject<SchedulerSlotHandle | null>;
    /**
     * Specifies the `id` of the wrapping element of the SchedulerSlot.
     */
    id?: string;
    /**
     * Specifies the `tabIndex` attribute of the wrapping element of the SchedulerSlot.
     *
     * Providing `null` will not apply any `tabIndex` to the element.
     */
    tabIndex?: number;
    /**
     * Specifies the `className` attribute of the wrapping element of the SchedulerSlot.
     *
     * The SchedulerSlot applies the following default className:
     * - `k-scheduler-cell`
     * - `k-slot-cell`
     * - `k-nonwork-hour` - if either `props.isWorkHour` or `props.isWorkDay` is `false`
     * - `k-selected` - if `props.selected` is set to `true`
     */
    className?: string;
    /**
     * Specifies the `style` object of the wrapping element of the SchedulerSlot.
     *
     * The SchedulerSlot applies the following default styles:
     *  - `userSelect`: `none`
     */
    style?: React.CSSProperties;
    /**
     * Specifies the `children` of the SchedulerSlot. By default, no child elements are rendered.
     */
    children?: React.ReactNode;
    /**
     * Overrides the `editable` prop of the `Scheduler` and the active view.
     */
    editable?: EditableProp | boolean;
    /**
     * Specifies if the `day` of the SchedulerSlot(in the current timezone) is between the `workDayStart` and `workDayEnd` of the active view.
     */
    isWorkDay?: boolean;
    /**
     * Specifies if the `time` of the SchedulerSlot(in the current timezone) is between the `workDayStart` and `workDayEnd` of the active view.
     */
    isWorkHour?: boolean;
    /**
     * Sets the selected state of the SchedulerSlot. By default the `k-selected` className is added if `props.selected` is `true`.
     */
    selected?: boolean;
    /**
     * Sets the `row` in the context of the current active view.
     * This property is being used to provide keyboard navigation between the SchedulerSlot components.
     */
    row: number;
    /**
     * Sets the `col` in the context of the current active view.
     * This property is being used to provide keyboard navigation between the SchedulerSlot components.
     */
    col: number;
    /**
     * Called each time the element, or any of its child elements, receive focus.
     */
    onFocus?: (event: SchedulerSlotFocusEvent) => void;
    /**
     * Called each time the element, or any of its child elements, lose focus.
     */
    onBlur?: (event: SchedulerSlotFocusEvent) => void;
    /**
     * Called each time the element, or any of its child elements, is clicked.
     */
    onClick?: (event: SchedulerSlotMouseEvent) => void;
    /**
     * Called each time the element, or any of its child elements receives `mouseenter` event.
     */
    onMouseEnter?: (event: SchedulerSlotMouseEvent) => void;
    /**
     * Called each time the element, or any of its child elements receives `mouseleave` event.
     */
    onMouseLeave?: (event: SchedulerSlotMouseEvent) => void;
    /**
     * Called each time the element, or any of its child elements receives `mouseover` event.
     */
    onMouseOver?: (event: SchedulerSlotMouseEvent) => void;
    /**
     * Called each time the element, or any of its child elements receives `mouseout` event.
     */
    onMouseOut?: (event: SchedulerSlotMouseEvent) => void;
    /**
     * Called each time the element, or any of its child elements, is double-clicked.
     */
    onDoubleClick?: (event: SchedulerSlotMouseEvent) => void;
    /**
     * Called each time a `keydown` event propagates to the wrapping element.
     */
    onKeyDown?: (event: SchedulerSlotKeyboardEvent) => void;
    /**
     * Called each time a `keypress` event propagates to the wrapping element.
     */
    onKeyPress?: (event: SchedulerSlotKeyboardEvent) => void;
    /**
     * Called each time a `keyup` event propagates to the wrapping element.
     */
    onKeyUp?: (event: SchedulerSlotKeyboardEvent) => void;
}
/**
 * Represents the object which is returned from the `ref` callback of the [SchedulerSlot]({% slug api_scheduler_schedulerslot %}).
 *
 * For more information about Refs, refer to the [React Refs & Dom](https://reactjs.org/docs/refs-and-the-dom.html) article.
 */
export interface SchedulerSlotHandle {
    element: HTMLDivElement | null;
    props: SchedulerSlotProps;
}
/**
 * Represents the default `slot` component rendered by the [KendoReact Scheduler component]({% slug overview_scheduler %}).
 */
export declare const SchedulerSlot: React.ForwardRefExoticComponent<SchedulerSlotProps & React.RefAttributes<SchedulerSlotHandle>>;
