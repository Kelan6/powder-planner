"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSlotsSelection = exports.SLOTS_SELECT_ACTION = void 0;
var React = require("react");
/**
 * Represents the available `action` types for the `SchedulerSlotsSelectAction` objects.
 *
 * The available actions are:
 * - `SLOTS_SELECT_SELECT`
 * - `SLOTS_SELECT_RESET`
 * - `SLOTS_SELECT_ADD`
 */
var SLOTS_SELECT_ACTION;
(function (SLOTS_SELECT_ACTION) {
    SLOTS_SELECT_ACTION["select"] = "SLOTS_SELECT_SELECT";
    SLOTS_SELECT_ACTION["reset"] = "SLOTS_SELECT_RESET";
    SLOTS_SELECT_ACTION["add"] = "SLOTS_SELECT_ADD";
})(SLOTS_SELECT_ACTION = exports.SLOTS_SELECT_ACTION || (exports.SLOTS_SELECT_ACTION = {}));
/** @hidden */
var useSlotsSelection = function (_slots) {
    var _a = React.useState([]), selectedSlots = _a[0], setSelectedSlots = _a[1];
    var handleSchedulerSlotsSelectAction = React.useCallback(function (action) {
        switch (action.type) {
            case SLOTS_SELECT_ACTION.select:
                if (!action.slot) {
                    return;
                }
                setSelectedSlots([action.slot]);
                break;
            case SLOTS_SELECT_ACTION.reset:
                setSelectedSlots([]);
                break;
            case SLOTS_SELECT_ACTION.add:
                if (!action.slot) {
                    return;
                }
                if (!selectedSlots.some(function (ss) { return ss === action.slot; })) {
                    setSelectedSlots(__spreadArray(__spreadArray([], selectedSlots, true), [action.slot], false));
                }
                break;
            default:
                break;
        }
    }, [selectedSlots]);
    return [selectedSlots, handleSchedulerSlotsSelectAction];
};
exports.useSlotsSelection = useSlotsSelection;
