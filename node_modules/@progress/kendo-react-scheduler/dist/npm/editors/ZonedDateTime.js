"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZonedDateTime = void 0;
var React = require("react");
var kendo_react_dateinputs_1 = require("@progress/kendo-react-dateinputs");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var SchedulerContext_1 = require("../context/SchedulerContext");
/**
 * @hidden
 */
var ZonedDateTime = function (props) {
    var _a = props.as, Component = _a === void 0 ? defaultProps.as : _a, other = __rest(props, ["as"]);
    var timezone = (0, SchedulerContext_1.useSchedulerPropsContext)().timezone;
    var handleChange = function (event) {
        if (other.onChange) {
            other.onChange({ value: readDateWithTimezone(event.target.value, timezone) });
        }
    };
    return (React.createElement(Component, __assign({}, other, { value: readDateAsLocal(other.value, timezone), onChange: handleChange })));
};
exports.ZonedDateTime = ZonedDateTime;
var readDateAsLocal = function (value, timezone) {
    if (value) {
        return (0, kendo_date_math_1.toLocalDate)(kendo_date_math_1.ZonedDate.fromLocalDate(value, timezone).toUTCDate());
    }
    return value;
};
var readDateWithTimezone = function (value, timezone) {
    if (value) {
        return kendo_date_math_1.ZonedDate.fromUTCDate(new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds())), timezone).toLocalDate();
    }
    return value;
};
var defaultProps = {
    as: kendo_react_dateinputs_1.DateTimePicker
};
