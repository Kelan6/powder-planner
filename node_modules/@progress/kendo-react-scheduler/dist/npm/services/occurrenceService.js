"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toOccurrences = void 0;
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_recurrence_1 = require("@progress/kendo-recurrence");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var utils_1 = require("../utils");
/** @hidden */
var toOccurrences = function (data, _a) {
    var dateRange = _a.dateRange, fields = _a.fields, timezone = _a.timezone;
    var result = data
        .map(readItem(fields))
        .reduce(occurrenceReducer(dateRange, timezone, fields), [])
        .filter(function (occurrence) { return !(0, utils_1.isMaster)(occurrence.dataItem, fields); });
    return result;
};
exports.toOccurrences = toOccurrences;
var readItem = function (fields) { return function (dataItem) {
    var result = {
        uid: (0, kendo_react_common_1.getter)(fields.id || 'id')(dataItem),
        start: (0, kendo_react_common_1.getter)(fields.start || 'start')(dataItem),
        startTimezone: (0, kendo_react_common_1.getter)(fields.startTimezone || 'startTimezone')(dataItem),
        originalStart: (0, kendo_react_common_1.getter)(fields.originalStart || 'originalStart')(dataItem),
        end: (0, kendo_react_common_1.getter)(fields.end || 'end')(dataItem),
        endTimezone: (0, kendo_react_common_1.getter)(fields.endTimezone || 'endTimezone')(dataItem),
        isAllDay: (0, kendo_react_common_1.getter)(fields.isAllDay || 'isAllDay')(dataItem),
        title: (0, kendo_react_common_1.getter)(fields.title || 'title')(dataItem),
        description: (0, kendo_react_common_1.getter)(fields.description || 'description')(dataItem),
        occurrenceId: (0, kendo_react_common_1.getter)('occurrenceId')(dataItem),
        recurrenceRule: (0, kendo_react_common_1.getter)(fields.recurrenceRule || 'recurrenceRule')(dataItem),
        recurrenceExceptions: (0, kendo_react_common_1.getter)(fields.recurrenceExceptions || 'recurrenceExceptions')(dataItem),
        recurrenceId: (0, kendo_react_common_1.getter)(fields.recurrenceId || 'recurrenceId')(dataItem),
        dataItem: (0, kendo_react_common_1.clone)(dataItem)
    };
    return result;
}; };
var occurrenceReducer = function (dateRange, timezone, fields) { return function (acc, current) {
    return __spreadArray(__spreadArray([], acc, true), ((Boolean(current.recurrenceRule)
        && Boolean(current.recurrenceId === null || current.recurrenceId === undefined)
        && (0, utils_1.isMaster)(current.dataItem, fields))
        ? __spreadArray([], occurrences(current, { dateRange: dateRange, timezone: timezone, fields: fields }), true) : [current]), true);
}; };
var occurrences = function (item, _a) {
    var dateRange = _a.dateRange, timezone = _a.timezone, fields = _a.fields;
    var rrule = item.recurrenceRule;
    var rule = (0, kendo_recurrence_1.parseRule)({ recurrenceRule: rrule });
    // changed as for display purposes timezone of the scheduler is the correct one
    if (!rule.start) {
        rule.start = kendo_date_math_1.ZonedDate.fromLocalDate(item.start, timezone);
    }
    if (!rule.end) {
        rule.end = kendo_date_math_1.ZonedDate.fromLocalDate(item.end, timezone);
    }
    var exceptionRule = item.recurrenceExceptions;
    if (exceptionRule) {
        rule.exceptionDates = exceptionRule
            .map(function (exDate) {
            return kendo_date_math_1.ZonedDate.fromLocalDate(exDate, timezone);
        });
    }
    var utcRangeStart = dateRange.zonedStart;
    var utcRangeEnd = dateRange.zonedEnd;
    var series = (0, kendo_recurrence_1.expand)(rule, {
        rangeStart: utcRangeStart,
        rangeEnd: utcRangeEnd
    });
    if (!series.events.length) {
        return [];
    }
    var expanded = series.events.map(function (occurrence, idx) {
        var occurrenceItem = (0, kendo_react_common_1.clone)(item);
        var occurrenceDataItem = (0, kendo_react_common_1.clone)(item.dataItem);
        occurrenceItem.recurrenceId = occurrenceItem.uid;
        (0, utils_1.setField)(occurrenceDataItem, fields.recurrenceId, item.uid);
        occurrenceItem.originalStart = occurrence.start.toLocalDate();
        (0, utils_1.setField)(occurrenceDataItem, fields.originalStart, occurrence.start.toLocalDate());
        occurrenceItem.start = occurrence.start.toLocalDate();
        (0, utils_1.setField)(occurrenceDataItem, fields.start, occurrence.start.toLocalDate());
        occurrenceItem.end = occurrence.end.toLocalDate();
        (0, utils_1.setField)(occurrenceDataItem, fields.end, occurrence.end.toLocalDate());
        occurrenceItem.occurrenceId = String(idx);
        (0, utils_1.setField)(occurrenceDataItem, 'occurrenceId', String(idx));
        occurrenceItem.dataItem = occurrenceDataItem;
        return occurrenceItem;
    });
    return expanded;
};
