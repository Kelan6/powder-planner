import * as React from 'react';
import { noop } from '@progress/kendo-react-common';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) `props`.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export var SchedulerEditItemPropsContext = React.createContext([null]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) `props`.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerEditItemPropsContext = function () { return React.useContext(SchedulerEditItemPropsContext); };
SchedulerEditItemPropsContext.displayName = 'SchedulerEditItemPropsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `formItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export var SchedulerEditItemFormItemContext = React.createContext([null, noop, noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `formItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerEditItemFormItemContext = function () { return React.useContext(SchedulerEditItemFormItemContext); };
SchedulerEditItemFormItemContext.displayName = 'SchedulerEditItemFormItemContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `dragItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export var SchedulerEditItemDragItemContext = React.createContext([null, noop, noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `dragItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerEditItemDragItemContext = function () { return React.useContext(SchedulerEditItemDragItemContext); };
SchedulerEditItemDragItemContext.displayName = 'SchedulerEditItemDragItemContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `resizeItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export var SchedulerEditItemResizeItemContext = React.createContext([null, noop, noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `resizeItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerEditItemResizeItemContext = function () { return React.useContext(SchedulerEditItemResizeItemContext); };
SchedulerEditItemResizeItemContext.displayName = 'SchedulerEditItemResizeItemContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `removeItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export var SchedulerEditItemRemoveItemContext = React.createContext([null, noop, noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `removeItem` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerEditItemRemoveItemContext = function () { return React.useContext(SchedulerEditItemRemoveItemContext); };
SchedulerEditItemRemoveItemContext.displayName = 'SchedulerEditItemRemoveItemContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `showRemoveDialog` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export var SchedulerEditItemShowRemoveDialogContext = React.createContext([false, noop, noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `showRemoveDialog` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerEditItemShowRemoveDialogContext = function () { return React.useContext(SchedulerEditItemShowRemoveDialogContext); };
SchedulerEditItemShowRemoveDialogContext.displayName = 'SchedulerEditItemShowRemoveDialogContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `showOccurrenceDialog` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 */
export var SchedulerEditItemShowOccurrenceDialogContext = React.createContext([false, noop, noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [SchedulerEditItem]({% slug edit-item_items_scheduler %}) internal `showOccurrenceDialog` state.
 *
 * For more information, refer to the [Items Context]({% slug state-update_items_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerEditItemShowOccurrenceDialogContext = function () { return React.useContext(SchedulerEditItemShowOccurrenceDialogContext); };
SchedulerEditItemShowOccurrenceDialogContext.displayName = 'SchedulerEditItemShowOccurrenceDialogContext';
/** @hidden */
export var SchedulerEditItemContext = function (_a) {
    var props = _a.props, form = _a.form, drag = _a.drag, resize = _a.resize, remove = _a.remove, showRemoveDialog = _a.showRemoveDialog, showOccurrenceDialog = _a.showOccurrenceDialog, children = _a.children;
    return (React.createElement(SchedulerEditItemPropsContext.Provider, { value: props },
        React.createElement(SchedulerEditItemFormItemContext.Provider, { value: form },
            React.createElement(SchedulerEditItemDragItemContext.Provider, { value: drag },
                React.createElement(SchedulerEditItemResizeItemContext.Provider, { value: resize },
                    React.createElement(SchedulerEditItemRemoveItemContext.Provider, { value: remove },
                        React.createElement(SchedulerEditItemShowRemoveDialogContext.Provider, { value: showRemoveDialog },
                            React.createElement(SchedulerEditItemShowOccurrenceDialogContext.Provider, { value: showOccurrenceDialog }, children))))))));
};
