import * as React from 'react';
import { noop } from '../utils';
/** @hidden */
export var SchedulerViewPropsContext = React.createContext({});
/** @hidden */
export var useSchedulerViewPropsContext = function () { return React.useContext(SchedulerViewPropsContext); };
SchedulerViewPropsContext.displayName = 'SchedulerViewPropsContext';
/** @hidden */
export var SchedulerViewRangesContext = React.createContext([]);
/** @hidden */
export var useSchedulerViewRangesContext = function () { return React.useContext(SchedulerViewRangesContext); };
SchedulerViewRangesContext.displayName = 'SchedulerViewRangesContext';
/** @hidden */
export var SchedulerViewSlotsContext = React.createContext([[], noop]);
/** @hidden */
export var useSchedulerViewSlotsContext = function () { return React.useContext(SchedulerViewSlotsContext); };
SchedulerViewSlotsContext.displayName = 'SchedulerViewSlotsContext';
/** @hidden */
export var SchedulerViewItemsContext = React.createContext([[], noop]);
/** @hidden */
export var useSchedulerViewItemsContext = function () { return React.useContext(SchedulerViewItemsContext); };
SchedulerViewItemsContext.displayName = 'SchedulerViewItemsContext';
/** @hidden */
export var SchedulerViewSelectedSlotsContext = React.createContext([[], noop]);
/** @hidden */
export var useSchedulerViewSelectedSlotsContext = function () { return React.useContext(SchedulerViewSelectedSlotsContext); };
SchedulerViewSelectedSlotsContext.displayName = 'SchedulerViewSelectedSlotsContext';
/** @hidden */
export var SchedulerViewSelectedItemsContext = React.createContext([[], noop]);
/** @hidden */
export var useSchedulerViewSelectedItemsContext = function () { return React.useContext(SchedulerViewSelectedItemsContext); };
SchedulerViewSelectedItemsContext.displayName = 'SchedulerViewSelectedItemsContext';
/** @hidden */
export var SchedulerViewFocusedItemsContext = React.createContext([[], noop]);
/** @hidden */
export var useSchedulerViewFocusedItemsContext = function () { return React.useContext(SchedulerViewFocusedItemsContext); };
SchedulerViewFocusedItemsContext.displayName = 'SchedulerViewFocusedItemsContext';
/** @hidden */
export var SchedulerViewFocusedSlotsContext = React.createContext([[], noop]);
/** @hidden */
export var useSchedulerViewFocusedSlotsContext = function () { return React.useContext(SchedulerViewFocusedSlotsContext); };
SchedulerViewFocusedSlotsContext.displayName = 'SchedulerViewFocusedSlotsContext';
/** @hidden */
export var SchedulerViewContext = function (_a) {
    var children = _a.children, 
    // Static
    props = _a.props, ranges = _a.ranges, 
    // Ref
    slots = _a.slots, items = _a.items, 
    // State
    // State.Selection
    selectedSlots = _a.selectedSlots, selectedItems = _a.selectedItems, 
    // State.Focus
    focusedItems = _a.focusedItems, focusedSlots = _a.focusedSlots;
    return (React.createElement(SchedulerViewPropsContext.Provider, { value: props },
        React.createElement(SchedulerViewRangesContext.Provider, { value: ranges },
            React.createElement(SchedulerViewSlotsContext.Provider, { value: slots },
                React.createElement(SchedulerViewItemsContext.Provider, { value: items },
                    React.createElement(SchedulerViewSelectedSlotsContext.Provider, { value: selectedSlots },
                        React.createElement(SchedulerViewSelectedItemsContext.Provider, { value: selectedItems },
                            React.createElement(SchedulerViewFocusedItemsContext.Provider, { value: focusedItems },
                                React.createElement(SchedulerViewFocusedSlotsContext.Provider, { value: focusedSlots }, children)))))))));
};
