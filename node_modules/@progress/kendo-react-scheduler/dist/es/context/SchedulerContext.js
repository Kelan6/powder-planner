import * as React from 'react';
import { defaultModelFields, noop } from '../utils';
import { DEFAULT_GROUP } from '../constants';
import { ZonedDate } from '@progress/kendo-date-math';
/** @hidden */
export var SchedulerElementContext = React.createContext({ current: null });
/** @hidden */
export var useSchedulerElementContext = function () { return React.useContext(SchedulerElementContext); };
SchedulerElementContext.displayName = 'SchedulerElementContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [Scheduler]({% slug api_scheduler_scheduler %}) props.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerPropsContext = React.createContext({});
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [Scheduler]({% slug api_scheduler_scheduler %}) props.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerPropsContext = function () { return React.useContext(SchedulerPropsContext); };
SchedulerPropsContext.displayName = 'SchedulerPropsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the available Scheduler [views]({% slug views_scheduler %}).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerViewsContext = React.createContext([]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the available Scheduler [views]({% slug views_scheduler %}).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerViewsContext = function () { return React.useContext(SchedulerViewsContext); };
SchedulerViewsContext.displayName = 'SchedulerViewsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerFieldsContext = React.createContext(defaultModelFields);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerFieldsContext = function () { return React.useContext(SchedulerFieldsContext); };
SchedulerFieldsContext.displayName = 'SchedulerFieldsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerDateFormatContext = React.createContext({ dateFormat: '{0:D}', shortDateFormat: '{0:d}' });
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerDateFormatContext = function () { return React.useContext(SchedulerDateFormatContext); };
SchedulerDateFormatContext.displayName = 'SchedulerDateFormatContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler `Group` object, calculated based on the [group]({% slug api_scheduler_schedulerprops %}#toc-group) and [resources]({% slug api_scheduler_schedulerprops %}#toc-resources).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerGroupsContext = React.createContext([DEFAULT_GROUP]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler `Group` object, calculated based on the [group]({% slug api_scheduler_schedulerprops %}#toc-group) and [resources]({% slug api_scheduler_schedulerprops %}#toc-resources).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerGroupsContext = function () { return React.useContext(SchedulerGroupsContext); };
SchedulerGroupsContext.displayName = 'SchedulerGroupsContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the `dateRange` of the current view.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerDateRangeContext = React.createContext({ start: new Date(), end: new Date(), zonedStart: ZonedDate.fromLocalDate(new Date()), zonedEnd: ZonedDate.fromLocalDate(new Date()) });
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the `dateRange` of the current view.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerDateRangeContext = function () { return React.useContext(SchedulerDateRangeContext); };
SchedulerDateRangeContext.displayName = 'SchedulerDateRangeContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the grouping orientation of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerOrientationContext = React.createContext(null);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the grouping orientation of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerOrientationContext = function () { return React.useContext(SchedulerOrientationContext); };
SchedulerOrientationContext.displayName = 'SchedulerOrientationContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `date` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerDateContext = React.createContext([new Date(), noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `date` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerDateContext = function () { return React.useContext(SchedulerDateContext); };
SchedulerDateContext.displayName = 'SchedulerDateContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `data` reducer.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerDataContext = React.createContext([[], noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `data` reducer.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerDataContext = function () { return React.useContext(SchedulerDataContext); };
SchedulerDataContext.displayName = 'SchedulerDataContext';
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `activeView` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export var SchedulerActiveViewContext = React.createContext(['day', noop]);
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `activeView` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export var useSchedulerActiveViewContext = function () { return React.useContext(SchedulerActiveViewContext); };
SchedulerActiveViewContext.displayName = 'SchedulerActiveViewContext';
/**
 * @hidden
 */
export var SchedulerItemSelectionContext = React.createContext([null, function () { }]);
/**
 * @hidden
 */
export var useSchedulerItemSelectionContext = function () { return React.useContext(SchedulerItemSelectionContext); };
SchedulerItemSelectionContext.displayName = 'SchedulerItemSelectionContext';
/**
 *
 */
/** @hidden */
export var SchedulerContext = function (_a) {
    var children = _a.children, element = _a.element, props = _a.props, views = _a.views, fields = _a.fields, groups = _a.groups, dateRange = _a.dateRange, dateFormat = _a.dateFormat, orientation = _a.orientation, date = _a.date, data = _a.data, activeView = _a.activeView, selection = _a.selection;
    return (React.createElement(SchedulerElementContext.Provider, { value: element },
        React.createElement(SchedulerPropsContext.Provider, { value: props },
            React.createElement(SchedulerViewsContext.Provider, { value: views },
                React.createElement(SchedulerFieldsContext.Provider, { value: fields },
                    React.createElement(SchedulerDateFormatContext.Provider, { value: dateFormat },
                        React.createElement(SchedulerGroupsContext.Provider, { value: groups },
                            React.createElement(SchedulerDateRangeContext.Provider, { value: dateRange },
                                React.createElement(SchedulerOrientationContext.Provider, { value: orientation },
                                    React.createElement(SchedulerDateContext.Provider, { value: date },
                                        React.createElement(SchedulerDataContext.Provider, { value: data },
                                            React.createElement(SchedulerActiveViewContext.Provider, { value: activeView },
                                                React.createElement(SchedulerItemSelectionContext.Provider, { value: selection }, children)))))))))))));
};
