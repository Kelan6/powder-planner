var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { getModelFields, getField, findMaster, setField, toSchedulerGroups, getToday } from './utils';
import { classNames, useRtl as useDir, clone } from '@progress/kendo-react-common';
import { SchedulerContext } from './context/SchedulerContext';
import { useControlledState } from './hooks/useControlledState';
import { useInternationalization, useLocalization } from '@progress/kendo-react-intl';
import { SchedulerHeader } from './components/header/SchedulerHeader';
import { SchedulerNavigation } from './components/header/navigation/SchedulerNavigation';
import { SchedulerViewSelector } from './components/header/view-selector/SchedulerViewSelector';
import { addDays, addMonths } from '@progress/kendo-date-math';
import { SchedulerFooter } from './components/footer/SchedulerFooter';
import { Button, ToolbarSpacer, ButtonGroup } from '@progress/kendo-react-buttons';
import { showFullDay, showWorkDay, messages, today, previousTitle, nextTitle } from './messages';
import { NavigationDatePicker } from './components/header/navigation/NavigationDatePicker';
import { ViewSelectorList } from './components/header/view-selector/ViewSelectorList';
import { BusinessHours } from './components/footer/bussiness-hours/BussinessHours';
import { DayView } from './main';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from './package-metadata';
var DEFAULT_DATE_FORMAT = '{0:D}';
var DEFAULT_SHORT_DATE_FORMAT = '{0:d}';
/**
 * Specifies the available [DataAction]({% slug api_scheduler_data_action %}) types.
 */
export var DATA_ACTION;
(function (DATA_ACTION) {
    DATA_ACTION[DATA_ACTION["create"] = 0] = "create";
    DATA_ACTION[DATA_ACTION["update"] = 1] = "update";
    DATA_ACTION[DATA_ACTION["remove"] = 2] = "remove";
})(DATA_ACTION || (DATA_ACTION = {}));
// tslint:enable:max-line-length
/**
 * Represents the [KendoReact Scheduler component]({% slug overview_scheduler %})
 */
export var Scheduler = React.forwardRef(function (props, ref) {
    validatePackage(packageMetadata);
    var timezone = props.timezone, onDataChange = props.onDataChange;
    var element = React.useRef(null);
    var scheduler = React.useRef(null);
    React.useImperativeHandle(scheduler, function () { return ({ props: props, element: element.current }); });
    React.useImperativeHandle(ref, function () { return scheduler.current; });
    var dir = useDir(element);
    var intl = useInternationalization();
    var localization = useLocalization();
    var fields = React.useMemo(function () { return getModelFields(props.modelFields); }, [props.modelFields]).fields;
    var _a = useControlledState(props.defaultDate || defaultProps.defaultDate, props.date, props.onDateChange), date = _a[0], setDate = _a[1];
    var views = React.Children.toArray(props.children || []);
    var _b = useControlledState(props.defaultView || (views[0] && views[0].props.name) || 'day', props.view, props.onViewChange), activeViewName = _b[0], setActiveViewName = _b[1];
    var _c = useControlledState(true), showWorkHours = _c[0], setShowWorkHours = _c[1];
    var view = views.find(function (currentView) { return currentView.props.name === activeViewName; })
        || views[0]
        || React.createElement(DayView, null);
    var data = props.data || defaultProps.data;
    var groups = toSchedulerGroups(props.group, props.resources);
    var orientation = props.group && props.group.orientation ? props.group.orientation : 'horizontal';
    var dateFormat = view.props.selectedDateFormat || DEFAULT_DATE_FORMAT;
    var shortDateFormat = view.props.selectedShortDateFormat || DEFAULT_SHORT_DATE_FORMAT;
    var slotDuration = view.props.slotDuration;
    var dateRange = (view.props.dateRange !== undefined
        ? typeof view.props.dateRange === 'function'
            ? view.props.dateRange.call(undefined, {
                intl: intl,
                date: date,
                timezone: timezone,
                numberOfDays: view.props.numberOfDays,
                workWeekStart: view.props.workWeekStart || intl.firstDay(),
                workWeekEnd: view.props.workWeekEnd || (intl.firstDay() + view.props.numberOfDays) % 6
            })
            : view.props.dateRange
        : { start: defaultProps.defaultDate, end: defaultProps.defaultDate });
    var handleDataChange = React.useCallback(function (_a) {
        var _b = _a.created, created = _b === void 0 ? [] : _b, _c = _a.updated, updated = _c === void 0 ? [] : _c, _d = _a.deleted, deleted = _d === void 0 ? [] : _d;
        if (onDataChange) {
            var args = {
                created: created,
                updated: updated,
                deleted: deleted
            };
            onDataChange.call(undefined, args);
        }
    }, [onDataChange]);
    var handleCreate = React.useCallback(function (action) {
        var created = [action.dataItem];
        handleDataChange({ created: created });
    }, [handleDataChange]);
    var handleUpdate = React.useCallback(function (action) {
        var created = [];
        var updated = [];
        if (action.series) {
            if (Array.isArray(action.dataItem)) {
                action.dataItem.map(function (dataItem) {
                    var masterClone = clone(findMaster(action.dataItem, fields, data));
                    var newDataItem = clone(dataItem);
                    setField(newDataItem, fields.originalStart, getField(masterClone, fields.originalStart));
                    setField(newDataItem, fields.recurrenceId, getField(masterClone, fields.recurrenceId));
                    setField(newDataItem, fields.recurrenceExceptions, getField(masterClone, fields.recurrenceExceptions));
                    updated.push(newDataItem);
                });
            }
            else {
                var masterClone = clone(findMaster(action.dataItem, fields, data));
                var newDataItem = clone(action.dataItem);
                setField(newDataItem, fields.originalStart, getField(masterClone, fields.originalStart));
                setField(newDataItem, fields.recurrenceId, getField(masterClone, fields.recurrenceId));
                setField(newDataItem, fields.recurrenceExceptions, getField(masterClone, fields.recurrenceExceptions));
                updated.push(newDataItem);
            }
        }
        else {
            if (Array.isArray(action.dataItem)) {
                action.dataItem.map(function (dataItem) {
                    var isException = getField(dataItem, fields.recurrenceRule) !== null
                        && getField(dataItem, fields.recurrenceRule) !== undefined;
                    var isRecurring = getField(dataItem, fields.recurrenceId) !== null
                        && getField(dataItem, fields.recurrenceId) !== undefined;
                    if (isRecurring && isException) {
                        var masterClone = clone(findMaster(dataItem, fields, data));
                        var exceptionDate = getField(dataItem, fields.originalStart);
                        var currentExceptions = getField(masterClone, fields.recurrenceExceptions) || [];
                        setField(masterClone, fields.recurrenceExceptions, __spreadArray(__spreadArray([], currentExceptions, true), [exceptionDate], false));
                        setField(dataItem, fields.recurrenceRule, null);
                        updated.push(masterClone);
                        created.push(dataItem);
                    }
                    else {
                        updated.push(dataItem);
                    }
                });
            }
            else {
                var isException = getField(action.dataItem, fields.recurrenceRule) !== null
                    && getField(action.dataItem, fields.recurrenceRule) !== undefined;
                var isRecurring = getField(action.dataItem, fields.recurrenceId) !== null
                    && getField(action.dataItem, fields.recurrenceId) !== undefined;
                if (isRecurring && isException) {
                    var masterClone = clone(findMaster(action.dataItem, fields, data));
                    var exceptionDate = getField(action.dataItem, fields.originalStart);
                    var currentExceptions = getField(masterClone, fields.recurrenceExceptions) || [];
                    setField(masterClone, fields.recurrenceExceptions, __spreadArray(__spreadArray([], currentExceptions, true), [exceptionDate], false));
                    setField(action.dataItem, fields.recurrenceRule, null);
                    updated.push(masterClone);
                    created.push(action.dataItem);
                }
                else {
                    updated.push(action.dataItem);
                }
            }
        }
        handleDataChange({ updated: updated, created: created });
    }, [handleDataChange, fields, data]);
    var handleRemove = React.useCallback(function (action) {
        var updated = [];
        var deleted = [];
        if (action.series) {
            var masterClone = clone(findMaster(action.dataItem, fields, data));
            var dataItem = clone(action.dataItem);
            setField(dataItem, fields.originalStart, getField(masterClone, fields.originalStart));
            setField(dataItem, fields.recurrenceId, getField(masterClone, fields.recurrenceId));
            setField(dataItem, fields.recurrenceRule, getField(masterClone, fields.recurrenceRule));
            setField(dataItem, fields.recurrenceExceptions, getField(masterClone, fields.recurrenceExceptions));
            deleted.push(dataItem);
        }
        else {
            var isException = getField(action.dataItem, fields.recurrenceRule) !== null
                && getField(action.dataItem, fields.recurrenceRule) !== undefined;
            if (!isException) {
                deleted.push(action.dataItem);
            }
            else {
                var masterClone = clone(findMaster(action.dataItem, fields, data));
                var exceptionDate = getField(action.dataItem, fields.originalStart);
                var currentExceptions = getField(masterClone, fields.recurrenceExceptions) || [];
                setField(masterClone, fields.recurrenceExceptions, __spreadArray(__spreadArray([], currentExceptions, true), [exceptionDate], false));
                setField(action.dataItem, fields.recurrenceRule, null);
                updated.push(masterClone);
            }
        }
        handleDataChange({ updated: updated, deleted: deleted });
    }, [handleDataChange, fields, data]);
    var handleDataAction = React.useCallback(function (action) {
        switch (action.type) {
            case DATA_ACTION.create:
                handleCreate(action);
                break;
            case DATA_ACTION.update:
                handleUpdate(action);
                break;
            case DATA_ACTION.remove:
                handleRemove(action);
                break;
            default:
                break;
        }
    }, [handleCreate, handleRemove, handleUpdate]);
    var handleActiveViewNameChange = React.useCallback(function (newView, event) {
        setActiveViewName(newView, __assign(__assign({}, event), { target: scheduler.current }));
    }, [
        setActiveViewName,
        scheduler
    ]);
    var handleDateChange = React.useCallback(function (newDate, event) {
        setDate(newDate, __assign(__assign({}, event), { target: scheduler.current }));
    }, [
        setDate,
        scheduler
    ]);
    var handleDatePickerChange = React.useCallback(function (event) {
        if (!event.value) {
            return;
        }
        setDate(event.value, __assign(__assign({}, event), { target: scheduler.current, nativeEvent: event.nativeEvent }));
    }, [
        setDate,
        scheduler
    ]);
    var handleNextClick = React.useCallback(function (syntheticEvent) {
        syntheticEvent.preventDefault();
        var offset = view.props.numberOfDays || 1;
        var isMonthView = offset > 27;
        var newDate = isMonthView
            ? addMonths(date, Math.round(offset / 27))
            : addDays(date, offset);
        setDate(newDate, event);
    }, [date, setDate, view.props.numberOfDays]);
    var handlePrevClick = React.useCallback(function (syntheticEvent) {
        syntheticEvent.preventDefault();
        var offset = view.props.numberOfDays || 1;
        var isMonthView = offset > 27;
        var newDate = isMonthView
            ? addMonths(date, -(Math.round(offset / 27)))
            : addDays(date, -(offset));
        setDate(newDate, event);
    }, [date, setDate, view.props.numberOfDays]);
    var handleTodayClick = React.useCallback(function (syntheticEvent) {
        syntheticEvent.preventDefault();
        var newDate = getToday();
        setDate(newDate, event);
    }, [setDate]);
    var handleShowWorkHoursClick = React.useCallback(function () { setShowWorkHours(!showWorkHours); }, [setShowWorkHours, showWorkHours]);
    var handleFocus = React.useCallback(function () {
        if (element.current) {
            element.current.style.boxShadow = '0 0.5px 0.5px 0.5px rgba(0, 0, 0, .12)';
        }
    }, [element]);
    var handleBlur = React.useCallback(function () {
        if (element.current) {
            element.current.style.boxShadow = '';
        }
    }, [element]);
    var style = React.useMemo(function () { return (__assign(__assign({}, props.style), { height: props.height })); }, [props.height, props.style]);
    var className = React.useMemo(function () { return classNames({ 'k-rtl': props.rtl !== undefined ? props.rtl : dir === 'rtl' }, 'k-widget k-scheduler k-floatwrap', props.className); }, [props.className, props.rtl, dir]);
    var todayText = localization.toLanguageString(today, messages[today]);
    var previousText = localization.toLanguageString(previousTitle, messages[previousTitle]);
    var nextText = localization.toLanguageString(nextTitle, messages[nextTitle]);
    var Header = view.props.header || props.header || defaultProps.header;
    var Footer = view.props.footer || props.footer || defaultProps.footer;
    var Navigation = SchedulerNavigation;
    var ViewSelector = SchedulerViewSelector;
    var _d = React.useState(null), eventSelection = _d[0], setEventSelection = _d[1];
    return (React.createElement(SchedulerContext
    // Static
    , { 
        // Static
        element: element, props: props, views: views, fields: fields, groups: groups, dateRange: dateRange, orientation: orientation, dateFormat: { dateFormat: dateFormat, shortDateFormat: shortDateFormat }, 
        // State
        date: [date, handleDateChange], activeView: [activeViewName, handleActiveViewNameChange], selection: [eventSelection, setEventSelection], 
        // Reducers
        data: [data, handleDataAction] },
        React.createElement("div", { ref: element, id: props.id, style: style, className: className, tabIndex: props.tabIndex, 
            // Aria
            dir: dir, role: props.role, "aria-label": props.ariaLabel, "aria-labelledby": props.ariaLabelledby, "aria-activedescendant": (eventSelection && eventSelection.props.id) || undefined, 
            // Handlers
            onFocus: handleFocus, onBlur: handleBlur },
            React.createElement(Header, null,
                React.createElement(Navigation, null,
                    React.createElement(ButtonGroup, { className: "k-scheduler-navigation" },
                        React.createElement(Button, { role: "button", tabIndex: -1, title: todayText, "aria-label": todayText, onClick: handleTodayClick }, todayText),
                        React.createElement(Button, { role: "button", tabIndex: -1, icon: 'caret-alt-left', title: previousText, "aria-label": previousText, onClick: handlePrevClick }),
                        React.createElement(Button, { role: "button", tabIndex: -1, icon: 'caret-alt-right', title: nextText, "aria-label": nextText, onClick: handleNextClick }))),
                React.createElement(NavigationDatePicker, { value: date, onChange: handleDatePickerChange }),
                React.createElement(ToolbarSpacer, null),
                React.createElement(ViewSelector, null,
                    React.createElement(ViewSelectorList, null))),
            view && (React.createElement(view.type, __assign({ editable: props.editable, key: view.props.name, item: props.item, viewItem: props.viewItem, editItem: props.editItem, task: props.task, viewTask: props.viewTask, editTask: props.viewTask, slot: props.slot, viewSlot: props.viewSlot, editSlot: props.editSlot, form: props.form, onDataAction: handleDataAction, showWorkHours: showWorkHours }, view.props))),
            React.createElement(Footer, null, (slotDuration && slotDuration < (24 * 60)) && (React.createElement(BusinessHours, null,
                React.createElement(Button, { tabIndex: -1, onClick: handleShowWorkHoursClick, icon: "clock" }, localization.toLanguageString(showWorkHours
                    ? showFullDay
                    : showWorkDay, messages[showWorkHours
                    ? showFullDay
                    : showWorkDay]))))))));
});
var defaultProps = {
    data: [],
    height: 600,
    tabIndex: -1,
    editable: false,
    defaultDate: new Date(),
    header: SchedulerHeader,
    footer: SchedulerFooter,
    navigation: SchedulerNavigation,
    viewSelector: SchedulerViewSelector
};
Scheduler.propTypes = {
    data: PropTypes.array,
    editable: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.shape({
            add: PropTypes.bool,
            drag: PropTypes.bool,
            edit: PropTypes.bool,
            remove: PropTypes.bool,
            resize: PropTypes.bool
        })
    ]),
    view: PropTypes.string,
    defaultView: PropTypes.string,
    date: PropTypes.any,
    defaultDate: PropTypes.any,
    rtl: PropTypes.bool,
    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    children: PropTypes.any,
    timezone: PropTypes.string,
    group: PropTypes.any,
    resources: PropTypes.any,
    modelFields: PropTypes.shape({
        id: PropTypes.string,
        start: PropTypes.string,
        startTimezone: PropTypes.string,
        end: PropTypes.string,
        endTimezone: PropTypes.string,
        isAllDay: PropTypes.string,
        title: PropTypes.string,
        description: PropTypes.string,
        recurrenceRule: PropTypes.string,
        recurrenceId: PropTypes.string,
        recurrenceException: PropTypes.string
    })
};
Scheduler.defaultProps = defaultProps;
Scheduler.displayName = 'KendoReactScheduler';
