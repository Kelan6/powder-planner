var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { BaseView } from '../../components/BaseView';
import { VerticalResourceIterator } from '../common/VerticalResourceIterator';
import { messages, dateTitle, timeTitle, eventTitle, noEvents, agendaViewTitle, allDay } from '../../messages';
import { useCellSync } from '../../hooks';
import { DAYS_IN_WEEK_COUNT } from '../../constants';
import { MS_PER_DAY, getDate, addDays, firstDayInWeek, ZonedDate } from '@progress/kendo-date-math';
import { classNames } from '@progress/kendo-react-common';
import { useLocalization, useInternationalization } from '@progress/kendo-react-intl';
import { toRanges } from '../../services/rangeService';
import { toOccurrences } from '../../services/occurrenceService';
import { toItems } from '../../services/itemsService';
import { toUTCDateTime, mapItemsToSlots, mapSlotsToItems } from '../../utils';
import { toSlots } from '../../services';
import { SchedulerEditTask } from '../../tasks/SchedulerEditTask';
import { SchedulerEditSlot } from '../../slots/SchedulerEditSlot';
import { useSchedulerPropsContext, useSchedulerDataContext, useSchedulerGroupsContext, useSchedulerFieldsContext, useSchedulerDateRangeContext } from '../../context/SchedulerContext';
import { SchedulerResourceIteratorContext } from '../../context/SchedulerResourceIteratorContext';
/**
 * Represents the KendoReact [AgendaView]({% slug agenda_view_scheduler %}) Component.
 */
export var AgendaView = function (props) {
    var _a = useSchedulerPropsContext(), group = _a.group, timezone = _a.timezone, propResources = _a.resources;
    var EditTask = props.editTask || SchedulerEditTask;
    var EditSlot = props.editSlot || SchedulerEditSlot;
    var element = React.useRef(null);
    var intl = useInternationalization();
    var localization = useLocalization();
    var data = useSchedulerDataContext()[0];
    var groups = useSchedulerGroupsContext();
    var fields = useSchedulerFieldsContext();
    var dateRange = useSchedulerDateRangeContext();
    var ranges = React.useMemo(function () { return toRanges(dateRange, { step: MS_PER_DAY, timezone: timezone }); }, [
        dateRange.start.getTime(),
        dateRange.end.getTime(),
        timezone
    ]);
    var slots = React.useMemo(function () { return toSlots(dateRange, { step: MS_PER_DAY }, { groups: groups, ranges: ranges }); }, [
        dateRange.start.getTime(),
        dateRange.end.getTime(),
        timezone,
        groups,
        ranges
    ]);
    var occurrences = React.useMemo(function () { return toOccurrences(data, { dateRange: dateRange, fields: fields, timezone: timezone }); }, [data, dateRange.start.getTime(), dateRange.end.getTime(), fields, timezone]);
    var items = React.useMemo(function () { return toItems(occurrences, { timezone: timezone }, { groups: groups, ranges: ranges }); }, [occurrences, timezone, groups, ranges]);
    var className = React.useMemo(function () { return classNames('k-scheduler-agendaview', props.className); }, [props.className]);
    useCellSync({ element: element, selector: '.k-scheduler-datecolumn', explicitDepth: false });
    useCellSync({ element: element, selector: '.k-scheduler-timecolumn', explicitDepth: false });
    React.useMemo(function () { return mapItemsToSlots(items, slots, true); }, [items, slots]);
    React.useMemo(function () { return mapSlotsToItems(items, slots, true); }, [items, slots]);
    return (React.createElement(BaseView, { ref: element, id: props.id, style: props.style, className: className, props: props, slots: items, ranges: ranges },
        React.createElement("div", { className: "k-scheduler-head" },
            React.createElement(VerticalResourceIterator, { resources: propResources, group: group },
                React.createElement(SchedulerResourceIteratorContext.Consumer, null, function (_a) {
                    var groupIndex = _a.groupIndex;
                    return (React.createElement("div", { className: "k-scheduler-row", key: groupIndex },
                        React.createElement("div", { className: "k-scheduler-cell k-heading-cell k-group-cell k-scheduler-datecolumn" }, localization.toLanguageString(dateTitle, messages[dateTitle])),
                        React.createElement("div", { className: "k-scheduler-cell k-heading-cell k-group-cell k-scheduler-timecolumn" }, localization.toLanguageString(timeTitle, messages[timeTitle])),
                        React.createElement("div", { className: "k-scheduler-cell k-heading-cell k-scheduler-eventcolumn" }, localization.toLanguageString(eventTitle, messages[eventTitle]))));
                }))),
        React.createElement("div", { className: "k-scheduler-body" },
            React.createElement(VerticalResourceIterator, { resources: propResources, group: group, nested: true },
                React.createElement(SchedulerResourceIteratorContext.Consumer, null, function (_a) {
                    var groupIndex = _a.groupIndex;
                    return slots
                        .filter(function (slot) { return slot.group.index === (groupIndex || 0); })
                        .map(function (slot, slotIndex, filtered) {
                        return (React.createElement("div", { className: "k-scheduler-row  k-scheduler-content", key: "".concat(groupIndex, ":").concat(slotIndex) },
                            React.createElement(EditSlot, __assign({}, slot, { editable: props.editable, row: (filtered.length * (groupIndex || 0) + slotIndex), col: 0, slot: props.slot, viewSlot: props.viewSlot, className: "k-scheduler-datecolumn k-group-cell" }),
                                React.createElement("div", null,
                                    React.createElement("strong", { className: "k-scheduler-agendaday" }, intl.formatDate(slot.zonedStart, 'dd')),
                                    React.createElement("em", { className: "k-scheduler-agendaweek" }, intl.formatDate(slot.zonedStart, 'EEEE')),
                                    React.createElement("span", { className: "k-scheduler-agendadate" }, intl.formatDate(slot.zonedStart, 'y')))),
                            React.createElement("div", { className: "k-scheduler-cell k-group-content" }, slot.items.length
                                ? slot.items.map(function (item, itemIndex) { return (React.createElement("div", { className: "k-scheduler-row", key: itemIndex },
                                    React.createElement("div", { className: "k-scheduler-cell k-scheduler-timecolumn" },
                                        React.createElement("div", null,
                                            item.tail && React.createElement("span", { className: "k-icon k-i-caret-alt-left" }),
                                            item.isAllDay
                                                ? localization.toLanguageString(allDay, messages[allDay])
                                                : getTimeFormat(intl, item),
                                            item.head && React.createElement("span", { className: "k-icon k-i-caret-alt-right" }))),
                                    React.createElement("div", { className: "k-scheduler-cell" },
                                        React.createElement(EditTask, __assign({ key: "".concat(slotIndex, ":").concat(itemIndex) }, item, { onDataAction: props.onDataAction, task: props.task, viewTask: props.viewTask, editable: props.editable }))))); })
                                : React.createElement("div", { className: "k-scheduler-cell k-heading-cell k-group-cell" }, localization.toLanguageString(noEvents, messages[noEvents])))));
                    });
                })))));
};
var getTimeFormat = function (intl, props) {
    var format = '{0:t}-{1:t}';
    if (props.head) {
        format = '{0:t}';
    }
    else if (props.tail) {
        format = '{1:t}';
    }
    return intl.format(format, props.zonedStart, props.zonedEnd);
};
var GET_START_DATE = function (date) { return getDate(date); };
var GET_END_DATE = function (start, numberOfDays) { return getDate(addDays(start, numberOfDays || 1)); };
var agendaViewDateRange = function (_a) {
    var intl = _a.intl, date = _a.date, _b = _a.numberOfDays, numberOfDays = _b === void 0 ? 1 : _b, timezone = _a.timezone;
    var normalized = ZonedDate.fromLocalDate(date, timezone);
    var firstDate = numberOfDays === DAYS_IN_WEEK_COUNT
        ? GET_START_DATE(firstDayInWeek(normalized, intl.firstDay()))
        : GET_START_DATE(normalized);
    var lastDate = GET_END_DATE(firstDate, numberOfDays);
    var zonedStart = ZonedDate.fromUTCDate(toUTCDateTime(firstDate), timezone);
    var zonedEnd = ZonedDate.fromUTCDate(toUTCDateTime(lastDate), timezone);
    var start = new Date(zonedStart.getTime());
    var end = new Date(zonedEnd.getTime());
    return {
        start: start,
        end: end,
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
var defaultProps = {
    name: 'agenda',
    title: function (localization) { return localization.toLanguageString(agendaViewTitle, messages[agendaViewTitle]); },
    dateRange: agendaViewDateRange,
    selectedDateFormat: '{0:D} - {1:D}',
    selectedShortDateFormat: '{0:d} - {1:d}',
    slotDuration: 60 * 24,
    slotDivision: 1,
    step: DAYS_IN_WEEK_COUNT,
    numberOfDays: DAYS_IN_WEEK_COUNT
};
var propTypes = {
    title: PropTypes.any
};
AgendaView.propTypes = propTypes;
AgendaView.defaultProps = defaultProps;
