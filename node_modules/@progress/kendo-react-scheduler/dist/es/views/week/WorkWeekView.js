var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Day, getDate, addDays, ZonedDate, MS_PER_DAY } from '@progress/kendo-date-math';
import { DAYS_IN_WEEK_COUNT } from '../../constants';
import { MultiDayView } from '../day/MultiDayView';
import { workWeekViewTitle, messages } from '../../messages';
import { toUTCDateTime } from '../../utils';
import { useSchedulerDateRangeContext } from '../../main';
export var WorkWeekView = function (props) {
    var dateRange = useSchedulerDateRangeContext();
    var numberOfDays = Math.round((dateRange.end.getTime() - dateRange.start.getTime()) / MS_PER_DAY);
    return (React.createElement(MultiDayView, __assign({}, props, { step: DAYS_IN_WEEK_COUNT, numberOfDays: numberOfDays })));
};
var firstDayInWeek = function (date, weekStartDay) {
    if (weekStartDay === void 0) { weekStartDay = Day.Sunday; }
    var first = date.clone();
    while (first.getDay() !== weekStartDay) {
        first = first.addDays(-1);
    }
    return first;
};
var workWeekViewDateRange = function (_a) {
    var intl = _a.intl, date = _a.date, timezone = _a.timezone, other = __rest(_a, ["intl", "date", "timezone"]);
    var normalized = ZonedDate.fromLocalDate(date, timezone);
    var workWeekStart = other.workWeekStart !== undefined ? other.workWeekStart : Day.Monday;
    var workWeekEnd = other.workWeekEnd !== undefined ? other.workWeekEnd : Day.Friday;
    var days = workWeekEnd < workWeekStart
        ? DAYS_IN_WEEK_COUNT + workWeekEnd - workWeekStart + 1
        : workWeekEnd - workWeekStart + 1;
    var firstDate = getDate(firstDayInWeek(normalized, workWeekStart));
    var lastDate = addDays(firstDate, days);
    var zonedStart = ZonedDate.fromUTCDate(toUTCDateTime(firstDate), timezone);
    var zonedEnd = ZonedDate.fromUTCDate(toUTCDateTime(lastDate), timezone);
    var start = new Date(zonedStart.getTime());
    var end = new Date(zonedEnd.getTime());
    return {
        start: start,
        end: end,
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
var defaultProps = {
    name: 'work-week',
    slotDuration: 60,
    slotDivisions: 2,
    numberOfDays: 7,
    dateRange: workWeekViewDateRange,
    title: function (localization) { return localization.toLanguageString(workWeekViewTitle, messages[workWeekViewTitle]); },
    workWeekStart: Day.Monday,
    workWeekEnd: Day.Friday,
    selectedDateFormat: '{0:D} - {1:D}',
    selectedShortDateFormat: '{0:d} - {1:d}'
};
WorkWeekView.defaultProps = defaultProps;
WorkWeekView.displayName = 'KendoReactSchedulerWorkWeekView';
