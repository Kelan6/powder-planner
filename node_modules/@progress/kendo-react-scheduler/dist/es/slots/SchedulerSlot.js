var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { classNames } from '@progress/kendo-react-common';
import { formatEventTime } from '../utils';
import { useInternationalization } from '@progress/kendo-react-intl';
import { useSchedulerSlot } from '../hooks/useSchedulerSlot';
/**
 * Represents the default `slot` component rendered by the [KendoReact Scheduler component]({% slug overview_scheduler %}).
 */
export var SchedulerSlot = React.forwardRef(function (props, ref) {
    var 
    // Focus
    onFocus = props.onFocus, onBlur = props.onBlur, 
    // Mouse
    onClick = props.onClick, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onMouseOut = props.onMouseOut, onMouseOver = props.onMouseOver, onDoubleClick = props.onDoubleClick, 
    // Keyboard
    onKeyDown = props.onKeyDown, onKeyPress = props.onKeyPress, onKeyUp = props.onKeyUp;
    var _a = useSchedulerSlot(props, ref), slot = _a.slot, element = _a.element;
    var intl = useInternationalization();
    var tabIndex = props.tabIndex !== undefined
        ? props.tabIndex === null
            ? undefined
            : props.tabIndex
        : props.selected
            ? 0
            : -1;
    var className = React.useMemo(function () { return classNames(props.className, 'k-scheduler-cell k-slot-cell', {
        'k-nonwork-hour': (!props.isWorkHour || !props.isWorkDay),
        'k-selected': props.selected
    }); }, [props.className, props.selected, props.isWorkHour, props.isWorkDay]);
    var style = React.useMemo(function () { return (__assign({ userSelect: 'none' }, props.style)); }, [props.style]);
    var slotLabel = React.useMemo(function () { return "".concat(formatEventTime(intl, props.zonedStart, props.zonedEnd, props.isAllDay || false)); }, [intl, props.isAllDay, props.zonedEnd, props.zonedStart]);
    // Handlers
    // Focus Handlers
    var handleFocus = React.useCallback(function (syntheticEvent) {
        if (!onFocus) {
            return;
        }
        onFocus.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onFocus, slot]);
    var handleBlur = React.useCallback(function (syntheticEvent) {
        if (!onBlur) {
            return;
        }
        onBlur.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onBlur, slot]);
    // Mouse Handlers
    var handleClick = React.useCallback(function (syntheticEvent) {
        if (!onClick) {
            return;
        }
        onClick.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onClick, slot]);
    var handleMouseOver = React.useCallback(function (syntheticEvent) {
        if (!onMouseOver) {
            return;
        }
        onMouseOver.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onMouseOver, slot]);
    var handleMouseOut = React.useCallback(function (syntheticEvent) {
        if (!onMouseOut) {
            return;
        }
        onMouseOut.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onMouseOut, slot]);
    var handleMouseEnter = React.useCallback(function (syntheticEvent) {
        if (!onMouseEnter) {
            return;
        }
        onMouseEnter.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onMouseEnter, slot]);
    var handleMouseLeave = React.useCallback(function (syntheticEvent) {
        if (!onMouseLeave) {
            return;
        }
        onMouseLeave.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onMouseLeave, slot]);
    var handleDoubleClick = React.useCallback(function (syntheticEvent) {
        if (!onDoubleClick) {
            return;
        }
        onDoubleClick.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onDoubleClick, slot]);
    // Keyboard Handlers
    var handleKeyDown = React.useCallback(function (syntheticEvent) {
        if (!onKeyDown) {
            return;
        }
        onKeyDown.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onKeyDown, slot]);
    var handleKeyPress = React.useCallback(function (syntheticEvent) {
        if (!onKeyPress) {
            return;
        }
        onKeyPress.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onKeyPress, slot]);
    var handleKeyUp = React.useCallback(function (syntheticEvent) {
        if (!onKeyUp) {
            return;
        }
        onKeyUp.call(undefined, {
            syntheticEvent: syntheticEvent,
            target: slot.current
        });
    }, [onKeyUp, slot]);
    return (React.createElement("div", { ref: element, id: props.id, style: style, className: className, tabIndex: tabIndex, "aria-label": slotLabel, "aria-selected": props.selected || undefined, 
        // Focus
        onFocus: handleFocus, onBlur: handleBlur, 
        // Mouse
        onClick: handleClick, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, onMouseOver: handleMouseOver, onMouseOut: handleMouseOut, onDoubleClick: handleDoubleClick, 
        // Keyboard
        onKeyDown: handleKeyDown, onKeyPress: handleKeyPress, onKeyUp: handleKeyUp, "data-slot": true, "data-slot-allday": props.isAllDay, "data-slot-start": props.start.getTime(), "data-slot-end": props.end.getTime(), "data-slot-group": props.group.index, "data-slot-range": props.range.index, "data-slot-index": props.index }, props.children));
});
var defaultProps = {
    isWorkHour: true,
    isWorkDay: true
};
SchedulerSlot.defaultProps = defaultProps;
SchedulerSlot.displayName = 'KendoReactSchedulerSlot';
