var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { timezoneNames } from '@progress/kendo-date-math';
import { Error, Label } from '@progress/kendo-react-labels';
import { useLocalization } from '@progress/kendo-react-intl';
import { Field, FormElement } from '@progress/kendo-react-form';
import { Input, Checkbox, TextArea } from '@progress/kendo-react-inputs';
import { DatePicker, DateTimePicker } from '@progress/kendo-react-dateinputs';
import { messages, editorEventTitle, editorEventStart, editorEventEnd, editorEventDescription, editorEventAllDay, editorEventTimeZone, editorEventSeparateTimeZones, editorEventStartTimeZone, editorEventEndTimeZone, editorValidationRequired } from '../messages';
import { useSchedulerPropsContext, useSchedulerFieldsContext } from '../context';
import { FilterableComboBox } from './FilterableComboBox';
import { classNames } from '@progress/kendo-react-common';
import { RecurrenceEditor as KendoRecurrenceEditor } from '../recurrence/RecurrenceEditor';
import { ResourceEditor as KendoResourceEditor } from './ResourceEditor';
import { ZonedDateTime } from './ZonedDateTime';
/* eslint-disable max-len */
/**
 * The default `editor` used inside the [`SchedulerForm`]({% slug api_scheduler_schedulerform %}) component.
 *
 * For the full list of the props available for this component, please refer to the [SchedulerFormEditorProps]({% slug api_scheduler_schedulerformeditorprops %}).
 */
export var SchedulerFormEditor = React.forwardRef(function (props, ref) {
    var component = React.useRef(null);
    var target = React.useRef(null);
    var timezones = timezoneNames();
    var localization = useLocalization();
    var fields = useSchedulerFieldsContext();
    var _a = useSchedulerPropsContext(), resources = _a.resources, timezone = _a.timezone;
    React.useImperativeHandle(target, function () { return ({
        element: (component.current && component.current.element) ? component.current.element : component.current,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var _b = props.as, Component = _b === void 0 ? defaultProps.as : _b, other = __rest(props, ["as"]);
    var _c = props.titleLabel, TitleLabel = _c === void 0 ? defaultProps.titleLabel : _c, _d = props.titleError, TitleError = _d === void 0 ? defaultProps.titleError : _d, _e = props.titleEditor, TitleEditor = _e === void 0 ? defaultProps.titleEditor : _e, _f = props.startLabel, StartLabel = _f === void 0 ? defaultProps.startLabel : _f, _g = props.startError, StartError = _g === void 0 ? defaultProps.startError : _g, _h = props.startEditor, StartEditor = _h === void 0 ? defaultProps.startEditor : _h, _j = props.startTimezoneLabel, StartTimezoneLabel = _j === void 0 ? defaultProps.startTimezoneLabel : _j, _k = props.startTimezoneError, StartTimezoneError = _k === void 0 ? defaultProps.startTimezoneError : _k, _l = props.startTimezoneEditor, StartTimezoneEditor = _l === void 0 ? defaultProps.startTimezoneEditor : _l, _m = props.startTimezoneCheckedLabel, StartTimezoneCheckedLabel = _m === void 0 ? defaultProps.startTimezoneCheckedLabel : _m, _o = props.startTimezoneCheckedEditor, StartTimezoneCheckedEditor = _o === void 0 ? defaultProps.startTimezoneCheckedEditor : _o, _p = props.endLabel, EndLabel = _p === void 0 ? defaultProps.endLabel : _p, _q = props.endError, EndError = _q === void 0 ? defaultProps.endError : _q, _r = props.endEditor, EndEditor = _r === void 0 ? defaultProps.endEditor : _r, _s = props.endTimezoneLabel, EndTimezoneLabel = _s === void 0 ? defaultProps.endTimezoneLabel : _s, _t = props.endTimezoneError, EndTimezoneError = _t === void 0 ? defaultProps.endTimezoneError : _t, _u = props.endTimezoneEditor, EndTimezoneEditor = _u === void 0 ? defaultProps.endTimezoneEditor : _u, _v = props.endTimezoneCheckedLabel, EndTimezoneCheckedLabel = _v === void 0 ? defaultProps.endTimezoneCheckedLabel : _v, _w = props.endTimezoneCheckedEditor, EndTimezoneCheckedEditor = _w === void 0 ? defaultProps.endTimezoneCheckedEditor : _w, _x = props.allDayLabel, AllDayLabel = _x === void 0 ? defaultProps.allDayLabel : _x, _y = props.allDayEditor, AllDayEditor = _y === void 0 ? defaultProps.allDayEditor : _y, _z = props.recurrenceEditor, RecurrenceEditor = _z === void 0 ? defaultProps.recurrenceEditor : _z, _0 = props.descriptionLabel, DescriptionLabel = _0 === void 0 ? defaultProps.descriptionLabel : _0, _1 = props.descriptionEditor, DescriptionEditor = _1 === void 0 ? defaultProps.descriptionEditor : _1, _2 = props.descriptionError, DescriptionError = _2 === void 0 ? defaultProps.descriptionError : _2, _3 = props.resourceLabel, ResourceLabel = _3 === void 0 ? defaultProps.resourceLabel : _3, _4 = props.resourceEditor, ResourceEditor = _4 === void 0 ? defaultProps.resourceEditor : _4;
    var start = props.valueGetter(fields.start) || new Date();
    var startTimezone = props.valueGetter(fields.startTimezone) || timezone || '';
    var endTimezone = props.valueGetter(fields.endTimezone) || timezone || '';
    var requiredValidationMessage = React.useMemo(function () { return localization.toLanguageString(editorValidationRequired, messages[editorValidationRequired]); }, [localization]);
    var _5 = React.useState(Boolean(props.valueGetter(fields.startTimezone))), startZoneChecked = _5[0], setStartZoneChecked = _5[1];
    var _6 = React.useState(Boolean(props.valueGetter(fields.endTimezone))), endZoneChecked = _6[0], setEndZoneChecked = _6[1];
    var handleStartZoneCheckboxChange = React.useCallback(function (e) {
        if (!e.value) {
            props.onChange(fields.startTimezone, { value: null });
            props.onChange(fields.endTimezone, { value: null });
            setEndZoneChecked(e.value);
        }
        setStartZoneChecked(e.value);
    }, [props.onChange, fields.startTimezone, fields.endTimezone]);
    var handleEndZoneCheckboxChange = React.useCallback(function (e) {
        if (!e.value) {
            props.onChange(fields.endTimezone, { value: null });
        }
        setEndZoneChecked(e.value);
    }, [props.onChange]);
    var requiredValidator = React.useCallback(function (value) { return (value ? undefined : requiredValidationMessage); }, [requiredValidationMessage]);
    var startTimezoneValidator = React.useCallback(function (_dataItem, formValueGetter) { return startZoneChecked
        ? requiredValidator(formValueGetter(fields.startTimezone))
        : undefined; }, [requiredValidator, startZoneChecked, fields.startTimezone]);
    var endTimezoneValidator = React.useCallback(function (_dataItem, formValueGetter) { return startZoneChecked && endZoneChecked
        ? requiredValidator(formValueGetter(fields.endTimezone)) || requiredValidator(formValueGetter(fields.startTimezone))
        : undefined; }, [requiredValidator, startZoneChecked, endZoneChecked, fields.startTimezone, fields.endTimezone]);
    var className = React.useMemo(function () { return classNames('k-scheduler-edit-form', props.className); }, [props.className]);
    return (React.createElement(Component, __assign({ ref: Component === defaultProps.as ? component : undefined }, other, { className: className }),
        React.createElement(React.Fragment, null,
            React.createElement("div", { className: "k-form-field" },
                React.createElement(Field, { name: fields.title, component: TitleLabel, editorId: 'k-scheduler-editor-title' }, localization.toLanguageString(editorEventTitle, messages[editorEventTitle])),
                React.createElement("div", { className: "k-form-field-wrap" },
                    React.createElement(Field, { id: "k-scheduler-editor-title", name: fields.title, field: fields.title, component: TitleEditor }),
                    (props.errors[fields.title]) && (React.createElement(Field, { name: fields.title, component: TitleError }, props.errors[fields.title])))),
            React.createElement("div", { className: "k-form-field" },
                React.createElement(Field, { name: fields.start, component: StartLabel, editorId: "k-scheduler-editor-start" }, localization.toLanguageString(editorEventStart, messages[editorEventStart])),
                React.createElement("div", { className: "k-form-field-wrap", style: { display: 'flex' } },
                    React.createElement("div", null,
                        React.createElement(Field, { id: "k-scheduler-editor-start", name: fields.start, width: "auto", component: StartEditor, as: (props.valueGetter(fields.isAllDay) ? DatePicker : DateTimePicker), timezone: timezone }),
                        (props.errors[fields.start]) && (React.createElement(Field, { name: fields.start, component: StartError }, props.errors[fields.start]))),
                    "\u00A0",
                    React.createElement("div", null,
                        React.createElement(StartTimezoneCheckedEditor, { id: 'k-scheduler-editor-set-start-timezone', onChange: handleStartZoneCheckboxChange, value: startZoneChecked }),
                        "\u00A0",
                        React.createElement(StartTimezoneCheckedLabel, { className: 'k-checkbox-label', editorId: 'k-scheduler-editor-set-start-timezone', style: { display: 'inline-flex' } }, localization.toLanguageString(editorEventTimeZone, messages[editorEventTimeZone]))))),
            startZoneChecked && (React.createElement("div", { className: "k-form-field" },
                React.createElement(Field, { name: fields.start, component: StartTimezoneLabel }, localization.toLanguageString(editorEventStartTimeZone, messages[editorEventStartTimeZone])),
                React.createElement("div", { className: "k-form-field-wrap" },
                    React.createElement(Field, { component: StartTimezoneEditor, value: startTimezone, validator: startTimezoneValidator, data: timezones, name: fields.startTimezone }),
                    (props.errors[fields.startTimezone]) && (React.createElement(Field, { name: fields.startTimezone, component: StartTimezoneError }, props.errors[fields.startTimezone]))))),
            React.createElement("div", { className: "k-form-field" },
                React.createElement(Field, { name: fields.end, component: EndLabel, editorId: "k-scheduler-editor-end" }, localization.toLanguageString(editorEventEnd, messages[editorEventEnd])),
                React.createElement("div", { className: "k-form-field-wrap", style: { display: 'flex' } },
                    React.createElement("div", null,
                        React.createElement(Field, { id: "k-scheduler-editor-end", name: fields.end, width: "auto", component: EndEditor, as: props.valueGetter(fields.isAllDay) ? DatePicker : DateTimePicker, timezone: timezone }),
                        (props.errors[fields.end]) && (React.createElement(Field, { name: fields.end, component: EndError }, props.errors[fields.end]))),
                    "\u00A0",
                    React.createElement("div", null, startZoneChecked && (React.createElement(React.Fragment, null,
                        React.createElement(EndTimezoneCheckedEditor, { id: 'k-scheduler-editor-set-end-timezone', onChange: handleEndZoneCheckboxChange, value: endZoneChecked }),
                        "\u00A0",
                        React.createElement(EndTimezoneCheckedLabel, { className: 'k-checkbox-label', editorId: 'k-scheduler-editor-set-end-timezone', style: { display: 'inline-flex' } }, localization.toLanguageString(editorEventSeparateTimeZones, messages[editorEventSeparateTimeZones]))))))),
            endZoneChecked && (React.createElement("div", { className: "k-form-field" },
                React.createElement(Field, { name: fields.endTimezone, component: EndTimezoneLabel }, localization.toLanguageString(editorEventEndTimeZone, messages[editorEventEndTimeZone])),
                React.createElement("div", { className: "k-form-field-wrap" },
                    React.createElement(Field, { value: endTimezone, data: timezones, validator: endTimezoneValidator, component: EndTimezoneEditor, name: fields.endTimezone }),
                    (props.errors[fields.endTimezone]) && (React.createElement(Field, { name: fields.endTimezone, component: EndTimezoneError }, props.errors[fields.endTimezone]))))),
            React.createElement("div", { className: "k-form-field" },
                React.createElement(Field, { name: fields.isAllDay, component: Label }),
                React.createElement("div", { className: "k-form-field-wrap" },
                    React.createElement(Field, { id: 'k-is-allday-checkbox', name: fields.isAllDay, component: AllDayEditor }),
                    "\u00A0",
                    React.createElement(Field, { name: fields.isAllDay, field: fields.isAllDay, editorId: 'k-is-allday-checkbox', className: 'k-checkbox-label', component: AllDayLabel }, localization.toLanguageString(editorEventAllDay, messages[editorEventAllDay])))),
            React.createElement(Field, { component: RecurrenceEditor, field: fields.recurrenceRule, name: fields.recurrenceRule, start: start }),
            React.createElement("div", { className: "k-form-field" },
                React.createElement(Field, { name: fields.description, component: DescriptionLabel }, localization.toLanguageString(editorEventDescription, messages[editorEventDescription])),
                React.createElement("div", { className: "k-form-field-wrap" },
                    React.createElement(Field, { component: DescriptionEditor, name: fields.description, rows: 1, id: 'k-event-description', style: { width: '100%' } }),
                    (props.errors[fields.description]) && (React.createElement(Field, { name: fields.description, component: DescriptionError }, props.errors[fields.description])))),
            (resources || []).map(function (resource) { return (React.createElement("div", { key: resource.field },
                React.createElement("div", { className: "k-form-field" },
                    React.createElement(Field, { name: resource.field, component: ResourceLabel }),
                    React.createElement(Label, null, resource.name),
                    React.createElement(Field, { name: resource.field, component: ResourceEditor, resource: resource, multiple: resource.multiple, data: resource.data, textField: resource.textField, valueField: resource.valueField, colorField: resource.colorField })))); }))));
});
var defaultProps = {
    as: React.forwardRef(function (props, ref) { return (React.createElement(FormElement, { ref: ref, id: props.id, style: props.style, tabIndex: props.tabIndex, className: props.className, horizontal: props.horizontal, children: props.children })); }),
    titleLabel: Label,
    titleError: Error,
    titleEditor: Input,
    startLabel: Label,
    startError: Error,
    startEditor: ZonedDateTime,
    startTimezoneLabel: Label,
    startTimezoneError: Error,
    startTimezoneEditor: FilterableComboBox,
    startTimezoneCheckedLabel: Label,
    startTimezoneCheckedEditor: Checkbox,
    endLabel: Label,
    endError: Error,
    endEditor: ZonedDateTime,
    endTimezoneLabel: Label,
    endTimezoneError: Error,
    endTimezoneEditor: FilterableComboBox,
    endTimezoneCheckedLabel: Label,
    endTimezoneCheckedEditor: Checkbox,
    allDayLabel: Label,
    allDayEditor: Checkbox,
    recurrenceEditor: KendoRecurrenceEditor,
    descriptionLabel: Label,
    descriptionEditor: TextArea,
    descriptionError: Error,
    resourceLabel: Label,
    resourceEditor: KendoResourceEditor
};
SchedulerFormEditor.displayName = 'KendoReactSchedulerFormEditor';
SchedulerFormEditor.defaultProps = defaultProps;
