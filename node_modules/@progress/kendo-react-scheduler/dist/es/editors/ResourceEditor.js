var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { DropDownList, MultiSelect } from '@progress/kendo-react-dropdowns';
import { isPresent } from '../utils';
/** @hidden */
export var ResourceEditor = function (props) {
    var Component = props.multiple
        ? MultiSelect
        : DropDownList;
    var handleChange = React.useCallback(function (event) {
        var valueField = event.target.props.dataItemKey;
        var newValue = props.multiple
            ? (event.target.value || []).map(function (item) { return item[valueField]; })
            : event.target.value[valueField];
        props.onChange.call(undefined, { value: newValue });
    }, [props.multiple, props.onChange]);
    var itemRenderer = React.useCallback(function (element, itemProps) {
        var children = (React.createElement(React.Fragment, null,
            props.colorField && (React.createElement("span", { key: 1, className: 'k-scheduler-mark', style: {
                    backgroundColor: itemProps.dataItem[props.colorField],
                    marginRight: isPresent(itemProps.dataItem[props.valueField]) ? '8px' : '4px'
                } }, "\u00A0")),
            React.createElement("span", { key: 2 },
                "\u00A0 ",
                element.props.children)));
        return React.cloneElement(element, __assign({}, element.props), children);
    }, [props.colorField, props.valueField]);
    var valueRenderer = React.useCallback(function (element, currentValue) {
        var children = (React.createElement(React.Fragment, null,
            props.colorField && currentValue && (React.createElement("span", { key: 1, className: 'k-scheduler-mark', style: {
                    backgroundColor: currentValue[props.colorField],
                    marginRight: currentValue[props.valueField] ? '8px' : '4px'
                } }, "\u00A0")),
            element.props.children));
        return React.cloneElement(element, {}, children);
    }, [props.colorField, props.valueField]);
    var value = Array.isArray(props.value)
        ? props.data.filter(function (item) { return props.value.some(function (val) { return item[props.valueField] === val; }); })
        : props.data.find(function (item) { return item[props.valueField] === props.value; });
    return (React.createElement(Component, { value: value, onChange: handleChange, data: props.data, textField: props.textField, dataItemKey: props.valueField, valid: props.valid, validationMessage: props.validationMessage, itemRender: itemRenderer, valueRender: valueRenderer }));
};
