var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { filterBy } from '@progress/kendo-data-query';
import { ComboBox } from '@progress/kendo-react-dropdowns';
/** @hidden */
export var FilterableComboBox = function (props) {
    var onChange = props.onChange, data = props.data, validationMessage = props.validationMessage, visited = props.visited, touched = props.touched, modified = props.modified, others = __rest(props, ["onChange", "data", "validationMessage", "visited", "touched", "modified"]);
    var _a = React.useState(data), filteredData = _a[0], setFilteredData = _a[1];
    var onValueChange = React.useCallback(function (e) { return onChange(e); }, [onChange]);
    var onFilterChange = React.useCallback(function (event) {
        var newData = filterBy((data || []), event.filter);
        setFilteredData(newData);
    }, []);
    return (React.createElement(ComboBox, __assign({ style: { width: '100%' }, data: filteredData, filterable: true, onFilterChange: onFilterChange, onChange: onValueChange }, others)));
};
