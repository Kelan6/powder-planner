var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { clone } from '@progress/kendo-react-common';
import * as React from 'react';
import { useSchedulerFieldsContext, useSchedulerViewSelectedItemsContext } from '../../context';
import { useControlledState } from '../../hooks/useControlledState';
import { DATA_ACTION } from '../../Scheduler';
import { getField, setField, slotDive } from '../../utils';
/**
 * Represents the available `action` types for the `SchedulerItemResizeItemAction` objects.
 *
 * The available types are:
 * - `RESIZE_ITEM_SET`
 * - `RESIZE_ITEM_START`
 * - `RESIZE_ITEM_START_DRAG`
 * - `RESIZE_ITEM_START_DRAG_SELECTED`
 * - `RESIZE_ITEM_END_DRAG`
 * - `RESIZE_ITEM_END_DRAG_SELECTED`
 * - `RESIZE_ITEM_COMPLETE`
 * - `RESIZE_ITEM_COMPLETE_OCCURRENCE`
 * - `RESIZE_ITEM_COMPLETE_SERIES`
 * - `RESIZE_ITEM_RESET`
 */
export var RESIZE_ITEM_ACTION;
(function (RESIZE_ITEM_ACTION) {
    RESIZE_ITEM_ACTION["set"] = "RESIZE_ITEM_SET";
    RESIZE_ITEM_ACTION["start"] = "RESIZE_ITEM_START";
    RESIZE_ITEM_ACTION["startDrag"] = "RESIZE_ITEM_START_DRAG";
    RESIZE_ITEM_ACTION["startDragSelected"] = "RESIZE_ITEM_START_DRAG_SELECTED";
    RESIZE_ITEM_ACTION["endDrag"] = "RESIZE_ITEM_END_DRAG";
    RESIZE_ITEM_ACTION["endDragSelected"] = "RESIZE_ITEM_END_DRAG_SELECTED";
    RESIZE_ITEM_ACTION["complete"] = "RESIZE_ITEM_COMPLETE";
    RESIZE_ITEM_ACTION["completeOccurrence"] = "RESIZE_ITEM_COMPLETE_OCCURRENCE";
    RESIZE_ITEM_ACTION["completeSeries"] = "RESIZE_ITEM_COMPLETE_SERIES";
    RESIZE_ITEM_ACTION["reset"] = "RESIZE_ITEM_RESET";
})(RESIZE_ITEM_ACTION || (RESIZE_ITEM_ACTION = {}));
;
/** @hidden */
export var useResizeItem = function (config, state) {
    var oldSlot = React.useRef(null);
    var _a = useControlledState.apply(void 0, state), resizeItem = _a[0], setResizeItem = _a[1];
    var selectedItems = useSchedulerViewSelectedItemsContext()[0];
    var fields = useSchedulerFieldsContext();
    var handleDragItemAction = function (action, event) {
        var newResizeItem = resizeItem;
        switch (action.type) {
            case RESIZE_ITEM_ACTION.set:
                newResizeItem = action.payload;
                break;
            case RESIZE_ITEM_ACTION.reset:
                newResizeItem = null;
                break;
            case RESIZE_ITEM_ACTION.start: {
                event.stopPropagation();
                var clientX = action.payload.x;
                var clientY = action.payload.y;
                var slot = slotDive(clientX, clientY, 7);
                if (!slot) {
                    return;
                }
                if (slot === oldSlot.current) {
                    return;
                }
                var slotStart = slot.getAttribute('data-slot-start');
                var newStart = new Date(Number(slotStart));
                var dataItem = clone(config.dataItem);
                if (newStart >= getField(dataItem, fields.end)) {
                    return;
                }
                setField(dataItem, fields.start, newStart);
                oldSlot.current = slot;
                newResizeItem = dataItem;
                break;
            }
            case RESIZE_ITEM_ACTION.startDragSelected: {
                event.stopPropagation();
                var clientX = action.payload.x;
                var clientY = action.payload.y;
                var dataItem = clone(config.dataItem);
                var slot = slotDive(clientX, clientY, 7);
                if (!slot) {
                    return;
                }
                if (slot === oldSlot.current) {
                    return;
                }
                var slotStart = slot.getAttribute('data-slot-start');
                var itemStart = new Date(getField(dataItem, fields.start));
                var newStart = new Date(Number(slotStart));
                var distance_1 = newStart.getTime() - itemStart.getTime();
                var unreachable_1 = false;
                var newResizeItems = selectedItems.map(function (si) {
                    if (!si.current) {
                        return null;
                    }
                    var selectedDataItem = clone(si.current.props.dataItem);
                    var selectedStart = new Date(si.current.props.start.getTime() + distance_1);
                    if (selectedStart >= getField(selectedDataItem, fields.end)) {
                        unreachable_1 = true;
                        return;
                    }
                    setField(selectedDataItem, fields.start, selectedStart);
                    return selectedDataItem;
                }).filter(Boolean);
                if (!unreachable_1) {
                    newResizeItem = __spreadArray([], newResizeItems, true);
                }
                break;
            }
            case RESIZE_ITEM_ACTION.startDrag: {
                var clientX = action.payload.x;
                var clientY = action.payload.y;
                var slot = slotDive(clientX, clientY, 7);
                if (!slot) {
                    return;
                }
                if (slot === oldSlot.current) {
                    return;
                }
                var slotStart = slot.getAttribute('data-slot-start');
                var newStart = new Date(Number(slotStart));
                var dataItem = clone(config.dataItem);
                if (newStart >= dataItem.end) {
                    return;
                }
                setField(dataItem, fields.start, newStart);
                oldSlot.current = slot;
                newResizeItem = dataItem;
                break;
            }
            case RESIZE_ITEM_ACTION.endDrag: {
                var clientX = action.payload.x;
                var clientY = action.payload.y;
                var slot = slotDive(clientX, clientY, 7);
                if (!slot) {
                    return;
                }
                if (slot === oldSlot.current) {
                    return;
                }
                var slotEnd = slot.getAttribute('data-slot-end');
                var newEnd = new Date(Number(slotEnd));
                var dataItem = clone(config.dataItem);
                if (newEnd <= dataItem.start) {
                    return;
                }
                setField(dataItem, fields.end, newEnd);
                oldSlot.current = slot;
                newResizeItem = dataItem;
                break;
            }
            case RESIZE_ITEM_ACTION.endDragSelected: {
                event.stopPropagation();
                var clientX = action.payload.x;
                var clientY = action.payload.y;
                var dataItem = clone(config.dataItem);
                var slot = slotDive(clientX, clientY, 7);
                if (!slot) {
                    return;
                }
                if (slot === oldSlot.current) {
                    return;
                }
                var slotEnd = slot.getAttribute('data-slot-start');
                var itemEnd = new Date(getField(dataItem, fields.end));
                var newEnd = new Date(Number(slotEnd));
                var distance_2 = newEnd.getTime() - itemEnd.getTime();
                var unreachable_2;
                var newResizeItems = selectedItems.map(function (si) {
                    if (!si.current) {
                        return null;
                    }
                    var selectedDataItem = clone(si.current.props.dataItem);
                    var selectedEnd = new Date(si.current.props.end.getTime() + distance_2);
                    if (selectedEnd <= getField(selectedDataItem, fields.start)) {
                        unreachable_2 = true;
                        return;
                    }
                    setField(selectedDataItem, fields.end, selectedEnd);
                    return selectedDataItem;
                }).filter(Boolean);
                if (!unreachable_2) {
                    newResizeItem = __spreadArray([], newResizeItems, true);
                }
                break;
            }
            case RESIZE_ITEM_ACTION.complete: {
                newResizeItem = null;
                if (config.onDataAction && resizeItem) {
                    config.onDataAction.call(undefined, {
                        type: DATA_ACTION.update,
                        series: false,
                        dataItem: resizeItem
                    });
                }
                break;
            }
            case RESIZE_ITEM_ACTION.completeOccurrence: {
                newResizeItem = null;
                if (config.onDataAction && resizeItem) {
                    config.onDataAction.call(undefined, {
                        type: DATA_ACTION.update,
                        series: false,
                        dataItem: resizeItem
                    });
                }
                break;
            }
            case RESIZE_ITEM_ACTION.completeSeries: {
                newResizeItem = null;
                var newDataItem = void 0;
                if (Array.isArray(resizeItem)) {
                    newDataItem = resizeItem.map(function (item) {
                        var newItem = clone(item);
                        setField(newItem, fields.start, getField(item, fields.start));
                        setField(newItem, fields.end, getField(item, fields.end));
                        return newItem;
                    });
                }
                else {
                    var newItem = clone(resizeItem);
                    setField(newItem, fields.start, getField(resizeItem, fields.start));
                    setField(newItem, fields.end, getField(resizeItem, fields.end));
                    newDataItem = newItem;
                }
                if (config.onDataAction && newDataItem) {
                    config.onDataAction.call(undefined, {
                        type: DATA_ACTION.update,
                        series: true,
                        dataItem: newDataItem
                    });
                }
                break;
            }
            default:
                newResizeItem = null;
                break;
        }
        setResizeItem(newResizeItem);
    };
    return [resizeItem, setResizeItem, handleDragItemAction];
};
