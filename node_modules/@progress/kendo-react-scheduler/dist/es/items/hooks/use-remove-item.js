import { useControlledState } from '../../hooks/useControlledState';
import { DATA_ACTION } from '../../Scheduler';
/**
 * Represents the available `action` types for the `SchedulerItemRemoveItemAction` objects.
 *
 * The available types are:
 * - `REMOVE_ITEM_SET`
 * - `REMOVE_ITEM_RESET`
 * - `REMOVE_ITEM_COMPLETE`
 */
export var REMOVE_ITEM_ACTION;
(function (REMOVE_ITEM_ACTION) {
    REMOVE_ITEM_ACTION["set"] = "REMOVE_ITEM_SET";
    REMOVE_ITEM_ACTION["reset"] = "REMOVE_ITEM_RESET";
    REMOVE_ITEM_ACTION["complete"] = "REMOVE_ITEM_COMPLETE";
})(REMOVE_ITEM_ACTION || (REMOVE_ITEM_ACTION = {}));
/** @hidden */
export var useRemoveItem = function (config, state) {
    var _a = useControlledState.apply(void 0, state), removeItem = _a[0], setRemoveItem = _a[1];
    var handleRemoveItemAction = function (action) {
        var newRemoveItem;
        switch (action.type) {
            case REMOVE_ITEM_ACTION.set:
                newRemoveItem = action.payload;
                break;
            case REMOVE_ITEM_ACTION.reset:
                newRemoveItem = null;
                break;
            case REMOVE_ITEM_ACTION.complete:
                if (config.onDataAction && removeItem) {
                    config.onDataAction.call(undefined, {
                        type: DATA_ACTION.remove,
                        series: config.series,
                        dataItem: removeItem
                    });
                }
                newRemoveItem = null;
                break;
            default:
                newRemoveItem = removeItem;
                break;
        }
        setRemoveItem(newRemoveItem);
    };
    return [removeItem, setRemoveItem, handleRemoveItemAction];
};
