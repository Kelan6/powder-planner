import { clone } from '@progress/kendo-react-common';
import { useSchedulerDataContext, useSchedulerFieldsContext } from '../../context';
import { useControlledState } from '../../hooks/useControlledState';
import { DATA_ACTION } from '../../Scheduler';
import { findMaster } from '../../utils';
/** @hidden */
export var FORM_ITEM_ACTION;
(function (FORM_ITEM_ACTION) {
    FORM_ITEM_ACTION["set"] = "FORM_ITEM_SET";
    FORM_ITEM_ACTION["setMaster"] = "FORM_ITEM_SET_MASTER";
    FORM_ITEM_ACTION["reset"] = "FORM_ITEM_RESET";
    FORM_ITEM_ACTION["complete"] = "FORM_ITEM_COMPLETE";
})(FORM_ITEM_ACTION || (FORM_ITEM_ACTION = {}));
/** @hidden */
export var useFormItem = function (config, state) {
    var _a = useControlledState.apply(void 0, state), formItem = _a[0], setFormItem = _a[1];
    var fields = useSchedulerFieldsContext();
    var data = useSchedulerDataContext()[0];
    var handleFormItemAction = function (action, event) {
        var newFormItem;
        switch (action.type) {
            case FORM_ITEM_ACTION.set:
                newFormItem = action.payload;
                break;
            case FORM_ITEM_ACTION.reset:
                newFormItem = null;
                break;
            case FORM_ITEM_ACTION.setMaster:
                newFormItem = clone(findMaster(action.payload, fields, data));
                break;
            case FORM_ITEM_ACTION.complete:
                if (config.onDataAction && formItem) {
                    config.onDataAction.call(undefined, {
                        type: DATA_ACTION.update,
                        series: config.series,
                        dataItem: action.payload
                    });
                    newFormItem = null;
                }
                break;
            default:
                newFormItem = formItem;
                break;
        }
        setFormItem(newFormItem, event);
    };
    return [formItem, setFormItem, handleFormItemAction];
};
