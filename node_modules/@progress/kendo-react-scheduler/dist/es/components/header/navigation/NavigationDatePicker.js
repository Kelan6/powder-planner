var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { Calendar } from '@progress/kendo-react-dateinputs';
import { useInternationalization } from '@progress/kendo-react-intl';
import { Button } from '@progress/kendo-react-buttons';
import { ZonedDate, getDate } from '@progress/kendo-date-math';
import { Popup } from '@progress/kendo-react-popup';
import { useAsyncFocusBlur, useWindow } from '@progress/kendo-react-common';
import { useSchedulerDateFormatContext, useSchedulerDateRangeContext, useSchedulerDateContext, useSchedulerPropsContext, useSchedulerElementContext } from '../../../context/SchedulerContext';
import { toUTCDateTime } from '../../../utils';
import { MS_PER_DAY } from '../../../constants';
/** @hidden */
export var NavigationDatePicker = React.forwardRef(function (props, ref) {
    var _a;
    var button = React.useRef(null);
    var calendar = React.useRef(null);
    React.useImperativeHandle(ref, function () { return button.current; });
    var timezone = useSchedulerPropsContext().timezone;
    var normalized = ZonedDate.fromLocalDate(props.value, timezone);
    var value = getDate(normalized);
    var element = useSchedulerElementContext();
    var getWindow = useWindow(element);
    var _b = React.useState('desktop'), media = _b[0], setMedia = _b[1];
    var _c = React.useState(false), show = _c[0], setShow = _c[1];
    var _d = React.useState(false), focused = _d[0], setFocused = _d[1];
    var intl = useInternationalization();
    var _e = useSchedulerDateFormatContext(), dateFormat = _e.dateFormat, shortDateFormat = _e.shortDateFormat;
    var dateRange = useSchedulerDateRangeContext();
    var date = useSchedulerDateContext()[0];
    var isMonthView = dateRange.end.getTime() - dateRange.start.getTime() > MS_PER_DAY * 27;
    var text = intl.format(dateFormat, isMonthView
        ? date
        : dateRange.zonedStart, isMonthView
        ? date
        : dateRange.zonedEnd.addDays(-1));
    var shortText = intl.format(shortDateFormat, isMonthView
        ? date
        : dateRange.zonedStart, isMonthView
        ? date
        : dateRange.zonedEnd.addDays(-1));
    var handleClick = React.useCallback(function () { setShow(!show); }, [show]);
    var handleFocus = React.useCallback(function () { setFocused(true); }, []);
    var handleBlur = React.useCallback(function () {
        setShow(false);
        setFocused(false);
    }, []);
    var handleChange = React.useCallback(function (event) {
        if (props.onChange) {
            var normalizedValue = ZonedDate.fromUTCDate(toUTCDateTime(event.value), timezone);
            props.onChange.call(undefined, __assign(__assign({}, event), { value: normalizedValue }));
        }
        setShow(false);
    }, [props.onChange, timezone]);
    var calculateMedia = React.useCallback(function () {
        setMedia(getWindow().matchMedia('(min-width: 1024px)').matches
            ? 'desktop'
            : 'mobile');
    }, [getWindow]);
    React.useEffect(function () {
        calculateMedia();
        var observer = new (getWindow().ResizeObserver)(calculateMedia);
        observer.observe(element.current);
        return function () {
            observer.disconnect();
        };
    }, [calculateMedia, element, getWindow]);
    React.useEffect(function () {
        if (show && focused) {
            if (calendar.current) {
                calendar.current.focus();
            }
        }
    }, [focused, show]);
    var _f = useAsyncFocusBlur({ onFocus: handleFocus, onBlur: handleBlur }), onFocus = _f.onFocus, onBlur = _f.onBlur;
    return (React.createElement(React.Fragment, null,
        React.createElement(Button, { ref: button, onFocus: onFocus, onBlur: onBlur, fillMode: 'flat', className: 'k-nav-current', icon: "calendar", "aria-live": "polite", tabIndex: -1, onClick: handleClick }, media === 'desktop'
            ? text
            : shortText),
        React.createElement(Popup, { anchor: (_a = button.current) === null || _a === void 0 ? void 0 : _a.element, show: show },
            React.createElement(Calendar, { ref: calendar, onFocus: onFocus, onBlur: onBlur, onChange: handleChange, value: value }))));
});
NavigationDatePicker.displayName = 'KendoReactSchedulerNavigationDatePicker';
